<?php
namespace Veles\Tests\Tools;

use Exception;
use PHPUnit\Framework\TestCase;
use Veles\Tools\PhpTokenBase;
use Veles\Validators\PhpTokenValidator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-03 at 22:07:03.
 * @group tools
 */
class PhpTokenBaseTest extends TestCase
{
	private const IDENTIFIER = 12;
	private const CONTENT = 'this is test content';
	private const LINE = 123;

	/**
	 * @var PhpTokenBase
	 */
	protected $object;

	public function testConstruct(): void
	{
		$validator = new PhpTokenValidator;
		$object = new PhpTokenBase(
			[self::IDENTIFIER, self::CONTENT, self::LINE],
			$validator
		);

		$msg = 'PhpTokenBase::__construct() wrong behavior!';
		self::assertSame(self::IDENTIFIER, $object->getId(), $msg);
		self::assertSame(self::CONTENT, $object->getContent(), $msg);
		self::assertSame(self::LINE, $object->getLine(), $msg);
	}

	/**
	 * @dataProvider constructExceptionProvider
	 */
	public function testConstructException($not_valid_token, $validator): void
	{
		$this->expectException(Exception::class);

		new PhpTokenBase($not_valid_token, $validator);
	}

	public function constructExceptionProvider(): array
	{
		return [[mt_rand(), new PhpTokenValidator]];
	}

	public function testGetContent(): void
	{
		$expected = uniqid();
		$validator = new PhpTokenValidator;
		$object = new PhpTokenBase(self::CONTENT, $validator);
		$object->setContent($expected);

		$actual = $object->getContent();

		$msg = 'Wrong behavior of PhpTokenBase::getContent()';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetId(): void
	{
		$expected = mt_rand();
		$validator = new PhpTokenValidator;
		$object = new PhpTokenBase(self::CONTENT, $validator);
		$object->setId($expected);

		$actual = $object->getId();

		$msg = 'Wrong behavior of PhpTokenBase::getId()';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetLine(): void
	{
		$expected = mt_rand();
		$validator = new PhpTokenValidator;
		$object = new PhpTokenBase(self::CONTENT, $validator);
		$object->setLine($expected);

		$actual = $object->getLine();

		$msg = 'Wrong behavior of PhpTokenBase::getLine()';
		self::assertSame($expected, $actual, $msg);
	}
}
