<?php
namespace Veles\Tests\Tools;

use Exception;
use PHPUnit\Framework\TestCase;
use Veles\Tools\CliColor;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-03 at 16:51:38.
 * @group tools
 */
class CliColorTest extends TestCase
{
	/**
	 * @var CliColor
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new CliColor;
	}

	/**
	 * @dataProvider invokeProvider
	 */
	public function testInvoke($obj, $string, $expected): void
	{
		$result = $obj($string);

		$msg = 'CliColor::__invoke() wrong behavior!';
		self::assertSame($expected, $result, $msg);
	}

	public function invokeProvider(): array
	{
		$string1 = uniqid('pef1');
		$string2 = uniqid('pef2');
		$string3 = uniqid('pef3');
		$obj1 = new CliColor;
		$obj2 = new CliColor;
		$obj3 = new CliColor;
		$obj3->setString($string3);

		return [
			[$obj1, $string1, "\033[0;32m$string1\033[0m"],
			[$obj2, $string2, "\033[0;32m$string2\033[0m"],
			[$obj2, null, ''],
			[$obj3, $string3, "\033[0;32m$string3\033[0m"],
			[$obj3, null, "\033[0;32m$string3\033[0m"]
		];
	}

	/**
	 * @dataProvider toStringProvider
	 */
	public function testToString($obj, $expected): void
	{
		$this->expectOutputString($expected);

		echo $obj;
	}

	public function toStringProvider(): array
	{
		$string1 = uniqid('pef1');
		$string2 = uniqid('pef2');
		$string3 = uniqid('pef3');
		$obj1 = new CliColor;
		$obj1->setString($string1);
		$obj2 = new CliColor;
		$obj2->setString($string2);
		$obj3 = new CliColor;
		$obj3->setString($string3);
		$obj4 = new CliColor;

		return [
			[$obj1, "\033[0;32m$string1\033[0m"],
			[$obj2, "\033[0;32m$string2\033[0m"],
			[$obj3, "\033[0;32m$string3\033[0m"],
			[$obj4, '']
		];
	}

	public function testSetString(): void
	{
		$expected = uniqid('someone');
		$result = $this->object->setString($expected);

		$msg = 'CliColor::setString() returns wrong result!';
		self::assertSame($this->object, $result, $msg);
	}

	public function testSetStringException(): void
	{
		$this->expectException(Exception::class);
		$this->expectExceptionMessage('Not valid string!');

		$this->object->setString();
	}

	/**
	 * @dataProvider setStyleProvider
	 */
	public function testSetStyle($style): void
	{
		$result = $this->object->setStyle($style);

		$msg = 'CliColor::setStyle() returns wrong result!';
		self::assertSame($this->object, $result, $msg);
	}

	public function setStyleProvider(): array
	{
		return [
			[['bold', 'strike']],
			[['default']],
			[['underline', 'bold', 'invert']]
		];
	}

	public function testSetStyleException(): void
	{
		$this->expectException(Exception::class);

		$style = uniqid();
		$this->object->setStyle([$style]);
	}

	/**
	 * @dataProvider setColorExceptionProvider
	 */
	public function testSetColorException($color): void
	{
		$this->expectException(Exception::class);

		$this->object->setColor($color);
	}

	public function setColorExceptionProvider(): array
	{
		return [
			[null],
			[[]],
			['grey']
		];
	}
}
