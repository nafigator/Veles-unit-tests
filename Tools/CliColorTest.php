<?php
namespace Veles\Tests\Tools;

use Veles\Tools\CliColor;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-03 at 16:51:38.
 * @group tools
 */
class CliColorTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var CliColor
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new CliColor;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers       Veles\Tools\CliColor::__invoke
	 * @dataProvider invokeProvider
	 *
	 * @param $obj
	 * @param $string
	 * @param $expected
	 */
	public function testInvoke($obj, $string, $expected)
	{
		$result = $obj($string);

		$msg = 'CliColor::__invoke() wrong behavior!';
		$this->assertSame($expected, $result, $msg);
	}

	public function invokeProvider()
	{
		$string1 = uniqid('pef1');
		$string2 = uniqid('pef2');
		$string3 = uniqid('pef3');
		$obj1 = new CliColor;
		$obj2 = new CliColor;
		$obj3 = new CliColor;
		$obj3->setString($string3);

		return [
			[$obj1, $string1, "\033[0;32m$string1\033[0m"],
			[$obj2, $string2, "\033[0;32m$string2\033[0m"],
			[$obj2, null, ''],
			[$obj3, $string3, "\033[0;32m$string3\033[0m"],
			[$obj3, null, "\033[0;32m$string3\033[0m"]
		];
	}

	/**
	 * @covers       Veles\Tools\CliColor::__toString
	 * @covers       Veles\Tools\CliColor::getStyle
	 * @covers       Veles\Tools\CliColor::getColor
	 * @dataProvider toStringProvider
	 *
	 * @param CliColor $obj
	 * @param $expected
	 */
	public function testToString($obj, $expected)
	{
		$this->expectOutputString($expected);

		echo $obj;
	}

	public function toStringProvider()
	{
		$string1 = uniqid('pef1');
		$string2 = uniqid('pef2');
		$string3 = uniqid('pef3');
		$obj1 = new CliColor;
		$obj1->setString($string1);
		$obj2 = new CliColor;
		$obj2->setString($string2);
		$obj3 = new CliColor;
		$obj3->setString($string3);
		$obj4 = new CliColor;

		return [
			[$obj1, "\033[0;32m$string1\033[0m"],
			[$obj2, "\033[0;32m$string2\033[0m"],
			[$obj3, "\033[0;32m$string3\033[0m"],
			[$obj4, '']
		];
	}

	/**
	 * @covers Veles\Tools\CliColor::setString
	 */
	public function testSetString()
	{
		$expected = uniqid('someone');
		$result = $this->object->setString($expected);

		$msg = 'CliColor::setString() wrong behavior!';
		$this->assertAttributeSame($expected, 'string', $this->object, $msg);

		$msg = 'CliColor::setString() returns wrong result!';
		$this->assertSame($this->object, $result, $msg);
	}

	/**
	 * @covers Veles\Tools\CliColor::setString
	 * @expectedException \Exception
	 * @expectedExceptionMessage Not valid string!
	 */
	public function testSetStringException()
	{
		$this->object->setString();
	}

	/**
	 * @covers          Veles\Tools\CliColor::setStyle
	 * @dataProvider    setStyleProvider
	 *
	 * @param $style
	 *
	 * @throws \Exception
	 */
	public function testSetStyle($style)
	{
		$result = $this->object->setStyle($style);
		$msg = 'CliColor::setStyle() wrong behavior!';
		$this->assertAttributeSame($style, 'style', $this->object, $msg);

		$msg = 'CliColor::setStyle() returns wrong result!';
		$this->assertSame($this->object, $result, $msg);
	}

	public function setStyleProvider()
	{
		return [
			[['bold', 'strike']],
			[['default']],
			[['underline', 'bold', 'invert']]
		];
	}

	/**
	 * @covers          Veles\Tools\CliColor::setStyle
	 * @expectedException \Exception
	 */
	public function testSetStyleException()
	{
		$style = uniqid();
		$this->object->setStyle([$style]);
	}

	/**
	 * @covers       Veles\Tools\CliColor::setColor
	 * @dataProvider setColorProvider
	 *
	 * @param $expected
	 */
	public function testSetColor($expected)
	{
		$this->object->setColor($expected);
		$msg = 'CliColor::setColor() wrong behavior!';
		$this->assertAttributeSame($expected, 'color', $this->object, $msg);
	}

	public function setColorProvider()
	{
		return [
			['black'],
			['red'],
			['green'],
			['yellow'],
			['blue'],
			['purple'],
			['cyan'],
			['white']
		];
	}

	/**
	 * @covers       Veles\Tools\CliColor::setColor
	 * @dataProvider setColorExceptionProvider
	 * @expectedException \Exception
	 *
	 * @param $color
	 */
	public function testSetColorException($color)
	{
		$this->object->setColor($color);
	}

	public function setColorExceptionProvider()
	{
		return [
			[null],
			[[]],
			['grey']
		];
	}

	/**
	 * @covers       Veles\Tools\CliColor::__construct
	 */
	public function testConstruct()
	{
		$msg = 'CliColor::__construct() wrong behavior!';
		$this->assertAttributeSame(['default'], 'style', $this->object, $msg);
		$this->assertAttributeSame('green', 'color', $this->object, $msg);
	}
}
