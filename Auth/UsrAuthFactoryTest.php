<?php
namespace Veles\Tests\Auth;

use Veles\Auth\UsrAuthFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-18 at 21:41:45.
 * @group auth
 */
class UsrAuthFactoryTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var UsrAuthFactory
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = $this->getMockBuilder('\Veles\Auth\UsrAuthFactory')
			->setMethods(['getPost', 'getCookies'])
			->getMock();
	}

	protected function tearDown()
	{
		unset($_COOKIE, $_POST);
	}

	/**
	 * @covers Veles\Auth\UsrAuthFactory::create
	 */
	public function testCreate()
	{
		$object = $this->getMockBuilder('\Veles\Auth\UsrAuthFactory')
			->setMethods(['getPost', 'getCookies'])
			->getMock();

		$result = $object->create();
		$expected = 'Veles\Auth\Strategies\GuestStrategy';

		$msg = 'UsrAuthFactory::create() return wrong result!';
		$this->assertInstanceOf($expected, $result, $msg);

		$object->expects($this->once())
			->method('getPost')
			->willReturn(['ln' => 'login', 'pw' => 'password']);

		$result = $object->create();
		$expected = 'Veles\Auth\Strategies\LoginFormStrategy';

		$msg = 'UsrAuthFactory::create() return wrong result!';
		$this->assertInstanceOf($expected, $result, $msg);

		$object = $this->getMockBuilder('\Veles\Auth\UsrAuthFactory')
			->setMethods(['getPost', 'getCookies'])
			->getMock();

		$object->expects($this->once())
			->method('getCookies')
			->willReturn(['id' => 1111, 'pw' => 'password']);

		$result = $object->create();
		$expected = 'Veles\Auth\Strategies\CookieStrategy';

		$msg = 'UsrAuthFactory::create() return wrong result!';
		$this->assertInstanceOf($expected, $result, $msg);
	}
}
