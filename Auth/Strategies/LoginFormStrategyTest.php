<?php
namespace Veles\Tests\Auth\Strategies;

use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\Db;
use Veles\Model\User;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-25 at 23:09:50.
 * @group auth
 */
class LoginFormStrategyTest extends \PHPUnit_Framework_TestCase
{
	protected static $tbl_name;

	public static function setUpBeforeClass()
	{
		// Create test table
		$tbl_name = static::$tbl_name = User::TBL_NAME;

		Db::setAdapter(PdoAdapter::instance());
		Db::query("
			CREATE TABLE $tbl_name (
			  id int(10) unsigned NOT NULL DEFAULT '0',
			  `group` tinyint(3) unsigned NOT NULL DEFAULT '16',
			  email char(30) NOT NULL,
			  hash char(60) NOT NULL,
			  short_name char(30) NOT NULL,
			  name char(30) NOT NULL DEFAULT 'n\\a',
			  patronymic char(30) NOT NULL DEFAULT 'n\\a',
			  surname char(30) NOT NULL DEFAULT 'n\\a',
			  birth_date date NOT NULL,
			  last_login timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
			  PRIMARY KEY (id),
			  KEY email (email)
			) ENGINE=INNODB DEFAULT CHARSET=utf8
		");
		// superpass GlOaUExBSD9HxuEYk2ZFaeDhggU716O
		Db::query("
			INSERT INTO $tbl_name
				(id, email, hash, short_name, birth_date)
			VALUES
				(?, ?, ?, ?, ?)
		", [
			1, 'mail@mail.org',
			'$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'uzzy', '1980-12-12'
		], 'issss');
	}

	public static function tearDownAfterClass()
	{
		$table =& static::$tbl_name;
		Db::query("DROP TABLE $table");
	}

	/**
	 * @covers       Veles\Auth\Strategies\LoginFormStrategy::identify
	 * @dataProvider identifyProvider
	 *
	 * @param $mail
	 * @param $pass
	 * @param $expected
	 */
	public function testIdentify($mail, $pass, $expected)
	{
		$object = new LoginFormStrategyCopy($mail, $pass, new User);
		$result = $object->identify();

		$msg = 'LoginFormStrategy::identify() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	public function identifyProvider()
	{
		return [
			['mail@mail.org', 'superpass', true],
			['mail500@mail.org', 'asf1900', false],
			['mail@mail.org', 'superpasslakj()', false],
			['mail@mail.org', 'usell', false]
		];
	}

	/**
	 * @covers       Veles\Auth\Strategies\LoginFormStrategy::__construct
	 * @dataProvider constructProvider
	 *
	 * @param $mail
	 * @param $pass
	 */
	public function testConstruct($mail, $pass)
	{
		$object = new LoginFormStrategyCopy($mail, $pass, new User);

		$msg = 'Wrong behavior of LoginFormStrategy::__construct()!';
		$this->assertAttributeSame($mail, 'login', $object, $msg);

		$msg = 'Wrong behavior of LoginFormStrategy::__construct()!';
		$this->assertAttributeSame($pass, 'password', $object, $msg);
	}

	public function constructProvider()
	{
		return [
			['mail200@mail.org', 'superpass3'],
			['mail300@mail.org', 'superpass2'],
			['mail500@mail.org', 'superpass1']
		];
	}

	/**
	 * @covers       Veles\Auth\Strategies\LoginFormStrategy::setLogin
	 */
	public function testSetLogin()
	{
		$expected = 'info@mail.ru';
		$pass = uniqid();

		$object = new LoginFormStrategyCopy($expected, $pass, new User);

		$msg = 'Wrong behavior of LoginFormStrategy::setLogin()!';
		$this->assertAttributeSame($expected, 'login', $object, $msg);
	}

	/**
	 * @covers       Veles\Auth\Strategies\LoginFormStrategy::getLogin
	 * @depends testSetLogin
	 */
	public function testGetLogin()
	{
		$expected = 'info@mail.ru';
		$pass = uniqid();

		$object = new LoginFormStrategyCopy($expected, $pass, new User);
		$result = $object->getLogin();

		$msg = 'LoginFormStrategy::getLogin() wrong behavior!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers       Veles\Auth\Strategies\LoginFormStrategy::setPassword
	 */
	public function testSetPassword()
	{
		$login = 'info@mail.ru';
		$expected = uniqid();

		$object = new LoginFormStrategyCopy($login, $expected, new User);

		$msg = 'LoginFormStrategy::setPassword() wrong behavior!';
		$this->assertAttributeSame($expected, 'password', $object, $msg);
	}

	/**
	 * @covers       Veles\Auth\Strategies\LoginFormStrategy::getPassword
	 * @depends testSetPassword
	 */
	public function testGetPassword()
	{
		$login = 'info@mail.ru';
		$expected = uniqid();

		$object = new LoginFormStrategyCopy($login, $expected, new User);
		$result = $object->getPassword();

		$msg = 'LoginFormStrategy::getLogin() wrong behavior!';
		$this->assertSame($expected, $result, $msg);
	}
}
