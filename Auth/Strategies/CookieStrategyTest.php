<?php
namespace Veles\Auth\Strategies;

use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\Db;
use Veles\Model\User;
use Veles\Tests\Auth\Strategies\CookieStrategyCopy;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-25 at 23:09:16.
 * @group auth
 */
class CookieStrategyTest extends \PHPUnit_Framework_TestCase
{
	protected static $tbl_name;

	public static function setUpBeforeClass()
	{
		// Create test table
		$tbl_name = static::$tbl_name = User::TBL_NAME;

		Db::setAdapter(PdoAdapter::instance());
		Db::query("
			CREATE TABLE $tbl_name (
			  id int(10) unsigned NOT NULL DEFAULT '0',
			  `group` tinyint(3) unsigned NOT NULL DEFAULT '16',
			  email char(30) NOT NULL,
			  hash char(60) NOT NULL,
			  short_name char(30) NOT NULL,
			  name char(30) NOT NULL DEFAULT 'n\\a',
			  patronymic char(30) NOT NULL DEFAULT 'n\\a',
			  surname char(30) NOT NULL DEFAULT 'n\\a',
			  birth_date date NOT NULL,
			  last_login timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
			  PRIMARY KEY (id),
			  KEY email (email)
			) ENGINE=INNODB DEFAULT CHARSET=utf8
		");
		// superpass GlOaUExBSD9HxuEYk2ZFaeDhggU716O
		Db::query("
			INSERT INTO $tbl_name
				(id, email, hash, short_name, birth_date)
			VALUES
				(?, ?, ?, ?, ?)
		", [
			1, 'mail@mail.org',
			'$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'uzzy', '1980-12-12'
		], 'issss');
	}

	public static function tearDownAfterClass()
	{
		$table =& static::$tbl_name;
		Db::query("DROP TABLE $table");
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers Veles\Auth\Strategies\CookieStrategy::identify
	 * @covers Veles\Auth\Strategies\CookieStrategy::checkInput
	 * @covers Veles\Auth\Strategies\AbstractAuthStrategy::findUser
	 * @dataProvider identifyProvider
	 */
	public function testIdentify($id, $hash, $expected)
	{
		$_SERVER['REQUEST_TIME'] = time();
		$_SERVER['HTTP_HOST'] = 'somehost.com';
		$_COOKIE['id'] = $id;
		$_COOKIE['pw'] = $hash;

		$object = new CookieStrategyCopy;
		$result = $object->identify();

		$msg = 'CookieStrategy::identify() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	public function identifyProvider()
	{
		return [
			[1, 'GlOaUExBSD9HxuEYk2ZFaeDhggU716O', true],
			['ss', '109()', false],
			[2, 'GlOaUExBSD9HxuEYk3ZFaeDhggU716O', false],
			[1, 'GlOaUExBSD9HxuEYk3ZFaeDhggU716O', false]
		];
	}

	/**
	 * @covers Veles\Auth\Strategies\CookieStrategy::__construct
	 * @dataProvider constructProvider
	 */
	public function testConstruct($id, $hash)
	{
		$_COOKIE['id'] = $id;
		$_COOKIE['pw'] = $hash;

		$object = new CookieStrategyCopy;

		$msg = 'Wrong behavior of CookieStrategy::__construct!';
		$this->assertAttributeSame($id, 'cookie_id', $object, $msg);

		$msg = 'Wrong behavior of CookieStrategy::__construct!';
		$this->assertAttributeSame($hash, 'cookie_hash', $object, $msg);
	}

	public function constructProvider()
	{
		return [
			[1, 'GlOaUExBSD9HxuEYk2ZFaeDhggU716O'],
			[5, 'GlOaUExBSD9HxuEYk2ZFaeDhggU7162'],
			[5555, 'GlOaUExBSD9HxuEYk2fFaeDhggU7162']
		];
	}
}
