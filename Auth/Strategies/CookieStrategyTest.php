<?php
namespace Veles\Tests\Auth\Strategies;

use PHPUnit\Framework\TestCase;
use Veles\Auth\Strategies\CookieStrategy;
use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\Db;
use Veles\Model\User;
use Veles\Tests\DataBase\DbCopy;

require_once 'setcookie_stub.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-25 at 23:09:16.
 * @group auth
 */
class CookieStrategyTest extends TestCase
{
	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(): void
	{
		DbCopy::unsetAdapter();
	}

	/**
	 * @dataProvider identifyProvider
	 *
	 * @param $id
	 * @param $hash
	 * @param $expected
	 * @param $user_result
	 */
	public function testIdentify($id, $hash, $expected, $user_result): void
	{
		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->onlyMethods(['row'])
			->getMock();
		$adapter->expects(self::once())
			->method('row')
			->willReturn($user_result);

		Db::setAdapter($adapter);

		$object = new CookieStrategy($id, $hash, new User);
		$actual = $object->identify();

		$msg = 'CookieStrategy::identify() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function identifyProvider(): array
	{
		$found = [
			'id'         => 1,
			'email'      => 'mail@mail.org',
			'hash'       => '$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'group'      => 'uzzy',
			'last_login' => '1980-12-12'
		];

		$not_found = [];

		return [
			[1, 'GlOaUExBSD9HxuEYk2ZFaeDhggU716O', true, $found],
			[2, 'GlOaUExBSD9HxuEYk3ZFaeDhggU716O', false, $not_found],
			[1, 'GlOaUExBSD9HxuEYk3ZFaeDhggU716O', false, $found]
		];
	}

	public function testGetPasswordHash(): void
	{
		$id	  = rand();
		$expected = uniqid();

		$object = new CookieStrategy($id, $expected, new User);
		$object->setPasswordHash($expected);

		$result = $object->getPasswordHash();

		$msg = 'CookieStrategy::getPasswordHash() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}

	public function testGetId(): void
	{
		$expected = rand();
		$hash = uniqid();

		$object = new CookieStrategy($expected, $hash, new User);
		$object->setId($expected);

		$result = $object->getId();

		$msg = 'CookieStrategy::getId() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}
}
