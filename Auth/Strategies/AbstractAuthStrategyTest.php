<?php
namespace Veles\Tests\Auth\Strategies;

use PHPUnit\Framework\TestCase;
use Veles\Auth\Strategies\GuestStrategy;
use Veles\Model\User;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-25 at 22:44:14.
 * @group auth
 */
class AbstractAuthStrategyTest extends TestCase
{
	/**
	 * @var GuestStrategy
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new GuestStrategy(new User);
	}

	/**
	 * @covers \Veles\Auth\Strategies\AbstractAuthStrategy::getUser
	 * @covers \Veles\Auth\Strategies\AbstractAuthStrategy::__construct
	 */
	public function testGetUser()
	{
		$expected = '\Veles\Model\User';
		$actual = $this->object->getUser();
		$msg = 'AbstractAuthStrategy::getUser() returns wrong result!';
		$this->assertInstanceOf($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Auth\Strategies\AbstractAuthStrategy::getErrors
	 */
	public function testGetErrors()
	{
		$expected = 0;
		$actual = $this->object->getErrors();
		$msg = 'AbstractAuthStrategy::getErrors() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Auth\Strategies\AbstractAuthStrategy::setError
	 */
	public function testSetError()
	{
		$expected = 8;
		$this->object->setError(GuestStrategy::ERR_NOT_VALID_LOGIN);
		$msg = 'AbstractAuthStrategy::setErrors() wrong behavior!';
		$this->assertAttributeSame($expected, 'errors', $this->object, $msg);

		$expected = 40;
		$this->object->setError(GuestStrategy::ERR_NOT_VALID_HASH);
		$msg = 'AbstractAuthStrategy::setErrors() wrong behavior!';
		$this->assertAttributeSame($expected, 'errors', $this->object, $msg);
	}
}
