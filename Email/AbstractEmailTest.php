<?php
namespace Veles\Tests\Email;

use Veles\Email\AbstractEmail;
use Veles\ErrorHandler\Subscribers\EmailNotifier;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-30 at 17:58:15.
 * @group email
 */
class AbstractEmailTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var AbstractEmail
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new EmailNotifier;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers       Veles\Email\AbstractEmail::send
	 * @covers       Veles\Email\AbstractEmail::realSend
	 * @dataProvider sendProvider
	 *
	 * @param array $receivers
	 */
	public function testSend($receivers)
	{
		$stub = $this
			->getMockBuilder('\Veles\ErrorHandler\Subscribers\EmailNotifier')
			->setMethods(['realSend'])
			->getMock();

		$stub->setReceivers($receivers);
		$stub->expects($this->exactly(count($receivers)))
			->method('realSend')
			->willReturn(true);

		$stub->send();
	}

	public function sendProvider()
	{
		return [
			[['receiver@dot.com']],
			[['receiver@dot.com', 'receiver1@dot.com', 'receiver2@dot.com']],
			[[]],
			[[
				'receiver@dot.com',
				'receiver1@dot.com',
				'receiver2@dot.com',
				'receiver3@dot.com',
				'receiver4@dot.com'
			]]
		];
	}

	/**
	 * @covers Veles\Email\AbstractEmail::setReceivers
	 */
	public function testSetReceivers()
	{
		$expected = ['receiver@dot.com'];
		$this->object->setReceivers($expected);

		$msg = 'AbstractEmail::setReceivers() wrong behavior!';
		$this->assertAttributeSame($expected, 'receivers', $this->object, $msg);
	}

	/**
	 * @covers Veles\Email\AbstractEmail::setSubject
	 */
	public function testSetSubject()
	{
		$subject = 'This is test subject!';
		$expected = '=?utf-8?B?VGhpcyBpcyB0ZXN0IHN1YmplY3Qh?=';
		$this->object->setSubject($subject);

		$msg = 'AbstractEmail::setSubject() wrong behavior!';
		$this->assertAttributeSame($expected, 'subject', $this->object, $msg);
	}

	/**
	 * @covers Veles\Email\AbstractEmail::getCharset
	 */
	public function testGetCharset()
	{
		$expected = 'utf-8';
		$result = $this->object->getCharset();

		$msg = 'AbstractEmail::getCharset() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Email\AbstractEmail::setCharset
	 */
	public function testSetCharset()
	{
		$expected = 'cp-1251';
		$this->object->setCharset($expected);

		$msg = 'AbstractEmail::setCharset() wrong behavior!';
		$this->assertAttributeSame($expected, 'charset', $this->object, $msg);
	}

	/**
	 * @covers Veles\Email\AbstractEmail::getEncoding
	 */
	public function testGetEncoding()
	{
		$expected = 'base64';
		$result = $this->object->getEncoding();

		$msg = 'AbstractEmail::getEncoding() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\Email\AbstractEmail::setEncoding
	 */
	public function testSetEncoding()
	{
		$expected = 'sha1';
		$this->object->setEncoding($expected);

		$msg = 'AbstractEmail::setEncoding() wrong behavior!';
		$this->assertAttributeSame($expected, 'encoding', $this->object, $msg);
	}
}
