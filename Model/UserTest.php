<?php
namespace Veles\Tests\Model;

use PHPUnit\Framework\TestCase;
use Veles\Auth\UsrGroup;
use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\Db;
use Veles\Model\User;
use Veles\Tests\DataBase\DbCopy;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-27 at 09:28:42.
 *
 * @group model
 */
class UserTest extends TestCase
{
	/**
	 * @var User
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new User;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		DbCopy::unsetAdapter();
	}

	/**
	 * @covers \Veles\Model\User::getId
	 */
	public function testGetId()
	{
		$expected = null;
		$actual = $this->object->getId();

		$msg = 'User::getId() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);

		$expected  = 1;
		$db_result = [
			'id'         => $expected,
			'email'      => 'user@mail.ru',
			'hash'       => '$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'group'      => UsrGroup::GUEST,
			'last_login' => 'string'
		];

		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->setMethods(['row'])
			->getMock();
		$adapter->expects($this->once())
			->method('row')
			->willReturn($db_result);

		Db::setAdapter($adapter);

		$this->object->getById($expected);

		$actual = $this->object->getId();
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Model\User::getHash
	 */
	public function testGetHash()
	{
		$expected = null;
		$actual = $this->object->getHash();

		$msg = 'User::getHash() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);

		$expected  = '$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O';
		$db_result = [
			'id'         => 1,
			'email'      => 'user@mail.ru',
			'hash'       => $expected,
			'group'      => UsrGroup::GUEST,
			'last_login' => 'string'
		];

		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->setMethods(['row'])
			->getMock();
		$adapter->expects($this->once())
			->method('row')
			->willReturn($db_result);

		Db::setAdapter($adapter);

		$this->object->getById(1);

		$actual = $this->object->getHash();
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Model\User::getCookieHash
	 */
	public function testGetCookieHash()
	{
		$expected = null;
		$actual = $this->object->getCookieHash();

		$msg = 'User::getCookieHash() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);

		$expected = 'GlOaUExBSD9HxuEYk2ZFaeDhggU716O';
		$db_result = [
			'id'         => 1,
			'email'      => 'user@mail.ru',
			'hash'       => '$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'group'      => UsrGroup::GUEST,
			'last_login' => 'string'
		];

		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->setMethods(['row'])
			->getMock();
		$adapter->expects($this->once())
			->method('row')
			->willReturn($db_result);

		Db::setAdapter($adapter);

		$this->object->getById(1);

		$actual = $this->object->getCookieHash();
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Model\User::getSalt
	 */
	public function testGetSalt()
	{
		$expected = null;
		$actual = $this->object->getSalt();

		$msg = 'User::getSalt() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);

		$expected = '$2a$07$usesomesillystringfor';
		$db_result = [
			'id'         => 1,
			'email'      => 'user@mail.ru',
			'hash'       => '$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'group'      => UsrGroup::GUEST,
			'last_login' => 'string'
		];

		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->setMethods(['row'])
			->getMock();
		$adapter->expects($this->once())
			->method('row')
			->willReturn($db_result);

		Db::setAdapter($adapter);

		$this->object->getById(1);

		$actual = $this->object->getSalt();
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Model\User::getGroup
	 */
	public function testGetGroup()
	{
		$expected = 16;
		$actual = $this->object->getGroup();

		$msg = 'User::getGroup() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);

		$expected = UsrGroup::ADMIN;
		$db_result = [
			'id'         => 1,
			'email'      => 'user@mail.ru',
			'hash'       => '$2a$07$usesomesillystringforeGlOaUExBSD9HxuEYk2ZFaeDhggU716O',
			'group'      => $expected,
			'last_login' => 'string'
		];

		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->setMethods(['row'])
			->getMock();
		$adapter->expects($this->once())
			->method('row')
			->willReturn($db_result);

		Db::setAdapter($adapter);

		$this->object->getById(1);

		$actual = $this->object->getGroup();
		$this->assertSame($expected, $actual, $msg);
	}
}
