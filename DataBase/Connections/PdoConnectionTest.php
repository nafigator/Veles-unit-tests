<?php
namespace Veles\Tests\DataBase\Connections;

use Exception;
use PDO;
use PHPUnit\Framework\TestCase;
use Veles\DataBase\Connections\PdoConnection;
use Veles\Tests\DataBase\Connections\PDOStub;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-27 at 17:40:33.
 * @group database
 */
class PdoConnectionTest extends TestCase
{
	/**
	 * @var PdoConnection
	 */
	protected $object;

	protected function setUp(): void
	{
		$this->object = new PdoConnection('conn-name');
	}

	public function testGetDsnException(): void
	{
		$this->expectException(Exception::class);
		$this->expectExceptionMessage('Connection DSN not set.');

		$this->object->getDsn();
	}

	public function testCreate(): void
	{
		$this->object->setDriver(PDOStub::class);
		$dsn = 'mysql:host=host;dbname=db_name;charset=utf8';
		$this->object->setDsn($dsn)
			->setUserName('user_name')
			->setPassword('password');

		$this->object->setCallback(
			'setAttribute', [PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ]
		);

		$this->object->create();

		$expected = PDO::FETCH_OBJ;
		$actual = $this->object->getResource()->getAttribute(PDO::ATTR_DEFAULT_FETCH_MODE);

		$msg = 'Wrong PdoConnection::create() behavior!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testSetDsn(): void
	{
		$expected = 'mysql:dbname=testdb;host=127.0.0.1';
		$result = $this->object->setDsn($expected);

		$msg = 'Wrong PdoConnection::setDsn return value!';
		self::assertSame($this->object, $result, $msg);
	}

	public function testGetDsn(): void
	{
		$expected = 'mysql:dbname=testdb;host=127.0.0.1';
		$this->object->setDsn($expected);

		$result = $this->object->getDsn();

		$msg = 'Wrong Connection::getDsn return result!';
		self::assertSame($expected, $result, $msg);
	}

	public function testSetOptions(): void
	{
		$expected = ['option-1', 'option-1'];
		$result = $this->object->setOptions($expected);

		$msg = 'Wrong PdoConnection::setOptions return value!';
		self::assertSame($this->object, $result, $msg);
	}

	public function testGetOptions(): void
	{
		$expected = ['option-1', 'option-1'];
		$this->object->setOptions($expected);

		$result = $this->object->getOptions();

		$msg = 'Wrong PdoConnection::getOptions return result!';
		self::assertSame($expected, $result, $msg);
	}

	public function testGetCallbacks(): void
	{
		$callback_name = 'callback';
		$args = ['argument 1', 'argument 2'];
		$expected = [
			['method' => $callback_name, 'arguments' => $args]
		];

		$this->object->setCallback($callback_name, $args);

		$result = $this->object->getCallbacks();

		$msg = 'Wrong PdoConnection::setCallback behavior!';
		self::assertSame($expected, $result, $msg);
	}
}
