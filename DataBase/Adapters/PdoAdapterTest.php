<?php
namespace Veles\Tests\DataBase\Adapters;

use PDOStatement;
use PHPUnit\Framework\TestCase;
use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\ConnectionPools\ConnectionPool;
use Veles\DataBase\Connections\PdoConnection;
use \PDO;
use Veles\DataBase\Exceptions\DbException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-10 at 15:41:03.
 *
 * @group database
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */
class PdoAdapterTest extends TestCase
{
	/**
	 * @var PdoAdapter
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new PdoAdapter;
	}

	public function testGetPool(): void
	{
		$expected = new ConnectionPool();
		$this->object->setPool($expected);

		$result = $this->object->getPool();
		$msg = 'Wrong PdoAdapterTest::getPool() behavior';
		self::assertSame($expected, $result, $msg);
	}

	public function testGetResource(): void
	{
		$expected = 100;
		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($expected);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->getResource();
		$msg = 'Wrong PdoAdapter::getResource() return value';
		self::assertSame($expected, $actual, $msg);
	}

	public function testSetConnection(): void
	{
		$expected = 10;

		$master = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->getMock();

		$slave = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['slave'])
			->onlyMethods(['getResource'])
			->getMock();
		$slave->expects(self::once())
			->method('getResource')
			->willReturn($expected);

		$pool = new ConnectionPool;
		$pool
			->addConnection($master, true)
			->addConnection($slave);

		$this->object->setPool($pool);
		$this->object->setConnection('slave');

		$actual = $this->object->getResource();
		$msg = 'Wrong PdoAdapter::setConnection() behavior';
		self::assertSame($expected, $actual, $msg);
	}

	public function testValue(): void
	{
		$expected = 100;
		$params = [];
		$types = null;

		$stmt1 = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['fetchColumn'])
			->getMock();
		$stmt1->expects(self::once())
			->method('fetchColumn')
			->willReturn($expected);

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->willReturn($stmt1);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->value('sql query', $params, $types);
		$msg = 'PdoAdapter::value() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testValue1(): void
	{
		$expected = 100;
		$params = [200, 'string'];
		$types = 'is';

		$stmt2 = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['fetchColumn', 'bindValue'])
			->getMock();
		$stmt2->expects(self::once())
			->method('fetchColumn')
			->willReturn($expected);
		$stmt2->expects(self::exactly(2))
			->method('bindValue')
			->withConsecutive(
				[1, 200, PDO::PARAM_INT],
				[2, 'string', PDO::PARAM_STR]
			)
			->willReturn($expected);

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->willReturn($stmt2);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->value('sql query', $params, $types);
		$msg = 'PdoAdapter::value() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testValueException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);
		$sql    = 'SELECT * FROM users';
		$params = [300, 'string-value'];
		$types  = 'is';

		$this->object->value($sql, $params, $types);
	}

	public function testRow(): void
	{
		$expected = 100;

		$stmt = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['fetch'])
			->getMock();
		$stmt->expects(self::once())
			->method('fetch')
			->willReturn($expected);

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->willReturn($stmt);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->row('sql query', [], null);
		$msg = 'PdoAdapter::row() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	/**
	 * @dataProvider rowExceptionProvider
	 */
	public function testRowException($pool): void
	{
		$this->expectException(DbException::class);

		$this->object->setPool($pool);
		$sql    = 'SELECT * FROM users';
		$params = [300, 'string-value'];
		$types  = 'is';

		$this->object->row($sql, $params, $types);
	}

	public function rowExceptionProvider(): array
	{
		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource1 = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource1->expects(self::once())
			->method('prepare')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn1 = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn1->expects(self::once())
			->method('getResource')
			->willReturn($resource1);

		$pool1 = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool1->expects(self::once())
			->method('getConnection')
			->willReturn($conn1);

		$resource2 = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource2->expects(self::once())
			->method('prepare')
			->willReturn(false);

		$conn2 = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn2->expects(self::once())
			->method('getResource')
			->willReturn($resource2);

		$pool2 = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool2->expects(self::once())
			->method('getConnection')
			->willReturn($conn2);

		return [
			[$pool1],
			[$pool2],
		];
	}

	public function testRows(): void
	{
		$expected = 100;

		$stmt = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['fetchAll'])
			->getMock();
		$stmt->expects(self::once())
			->method('fetchAll')
			->willReturn($expected);

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->willReturn($stmt);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->rows('sql query', [], null);
		$msg = 'PdoAdapter::rows() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testRowsException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);
		$sql    = 'SELECT * FROM users';
		$params = [300, 'string-value'];
		$types  = 'is';

		$this->object->rows($sql, $params, $types);
	}

	public function testBegin(): void
	{
		$expected = 100;

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['beginTransaction'])
			->getMock();
		$resource->expects(self::once())
			->method('beginTransaction')
			->willReturn($expected);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->begin();
		$msg = 'PdoAdapter::begin() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testBeginException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['beginTransaction'])
			->getMock();
		$resource->expects(self::once())
			->method('beginTransaction')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$this->object->begin();
	}

	public function testRollback(): void
	{
		$expected = 100;

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['rollBack'])
			->getMock();
		$resource->expects(self::once())
			->method('rollBack')
			->willReturn($expected);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->rollback();
		$msg = 'PdoAdapter::rollBack() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testRollbackException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['rollBack'])
			->getMock();
		$resource->expects(self::once())
			->method('rollBack')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$this->object->rollBack();
	}

	public function testCommit(): void
	{
		$expected = 100;

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['commit'])
			->getMock();
		$resource->expects(self::once())
			->method('commit')
			->willReturn($expected);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->commit();
		$msg = 'PdoAdapter::commit() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testCommitException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['commit'])
			->getMock();
		$resource->expects(self::once())
			->method('commit')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$this->object->commit();
	}

	/**
	 * @dataProvider queryProvider
	 */
	public function testQuery($resource, $expected, $params, $types): void
	{
		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->query('sql query', $params, $types);
		$msg = 'PdoAdapter::query() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function queryProvider(): array
	{
		$stmt1 = $expected = true;
		$expected4 = false;

		$resource1 = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['query'])
			->getMock();
		$resource1->expects(self::once())
			->method('query')
			->willReturn($stmt1);

		$stmt2 = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['execute'])
			->getMock();
		$stmt2->expects(self::once())
			->method('execute')
			->willReturn($expected);

		$resource2 = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource2->expects(self::once())
			->method('prepare')
			->willReturn($stmt2);

		$stmt3 = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['bindValue', 'execute'])
			->getMock();
		$stmt3->expects(self::exactly(2))
			->method('bindValue')
			->withConsecutive(
				[$this->equalTo(1), $this->equalTo(200), $this->equalTo(PDO::PARAM_INT)],
				[$this->equalTo(2), $this->equalTo('string'), $this->equalTo(PDO::PARAM_STR)]
			);
		$stmt3->expects(self::once())
			->method('execute')
			->willReturn($expected);

		$resource3 = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource3->expects(self::once())
			->method('prepare')
			->willReturn($stmt3);

		$resource4 = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource4->expects(self::once())
			->method('prepare')
			->willReturn($expected4);

		return [
			[$resource1, $expected, [], null],
			[$resource2, $expected, ['string'], null],
			[$resource3, $expected, [200, 'string'], 'is'],
			[$resource4, $expected4, [200, 'string'], 'is'],
		];
	}

	public function testQueryException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['query'])
			->getMock();
		$resource->expects(self::once())
			->method('query')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);
		$sql    = 'DELETE FROM users';
		$params = [];
		$types  = null;

		$this->object->query($sql, $params, $types);
	}

	public function testGetLastInsertId(): void
	{
		$expected = 100;

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['lastInsertId'])
			->getMock();
		$resource->expects(self::once())
			->method('lastInsertId')
			->willReturn($expected);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->getLastInsertId();
		$msg = 'PdoAdapter::getLastInsertId() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetLastInsertIdException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['lastInsertId'])
			->getMock();
		$resource->expects(self::once())
			->method('lastInsertId')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$this->object->getLastInsertId();
	}

	public function testGetFoundRows(): void
	{
		$expected = 100;

		$stmt = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['fetchColumn'])
			->getMock();
		$stmt->expects(self::once())
			->method('fetchColumn')
			->willReturn($expected);

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->willReturn($stmt);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->getFoundRows();
		$msg = 'PdoAdapter::getFoundRows() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetStmt(): void
	{
		$stmt = $this->getMockBuilder(PDOStatement::class)
			->onlyMethods(['fetchColumn'])
			->getMock();
		$stmt->expects(self::once())
			->method('fetchColumn');

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['prepare'])
			->getMock();
		$resource->expects(self::once())
			->method('prepare')
			->willReturn($stmt);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$this->object->value('sql query', [], null);

		$actual = $this->object->getStmt();
		$msg = 'PdoAdapter::getStmt() returns wrong result!';
		self::assertSame($stmt, $actual, $msg);
	}

	public function testEscape(): void
	{
		$expected = 'escaped string';

		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['quote'])
			->getMock();
		$resource->expects(self::once())
			->method('quote')
			->willReturn($expected);

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->escape('string');
		$msg    = 'PdoAdapter::escape() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testEscapeException(): void
	{
		$this->expectException(DbException::class);

		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder(PDO::class)
			->disableOriginalConstructor()
			->onlyMethods(['quote'])
			->getMock();
		$resource->expects(self::once())
			->method('quote')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder(PdoConnection::class)
			->setConstructorArgs(['master'])
			->onlyMethods(['getResource'])
			->getMock();
		$conn->expects(self::once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder(ConnectionPool::class)
			->onlyMethods(['getConnection'])
			->getMock();
		$pool->expects(self::once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$this->object->escape('string');
	}
}
