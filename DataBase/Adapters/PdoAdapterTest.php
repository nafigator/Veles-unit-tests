<?php
namespace Veles\Tests\DataBase\Adapters;

use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\ConnectionPools\ConnectionPool;
use Veles\DataBase\Connections\PdoConnection;
use \PDO;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-10 at 15:41:03.
 * @group database
 */
class PdoAdapterTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var PdoAdapter
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new PdoAdapter;
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::getPool
	 */
	public function testGetPool()
	{
		$expected = new ConnectionPool();
		$this->object->setPool($expected);

		$result = $this->object->getPool();
		$msg = 'Wrong PdoAdapterTest::getPool() behavior';
		$this->assertSame($expected, $result, $msg);
		$this->assertAttributeEquals(null, 'connection_name', $this->object, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::setPool
	 */
	public function testSetPool()
	{
		$pool = new ConnectionPool;

		$this->object->setPool($pool);
		$msg = 'Wrong PdoAdapterTest::setPool() behavior';
		$this->assertAttributeEquals($pool, 'pool', $this->object, $msg);
		$this->assertAttributeEquals(null, 'connection_name', $this->object, $msg);

		$pool = new ConnectionPool;
		$connection = new PdoConnection('conn-name');
		$pool->addConnection($connection, true);
		$this->object->setPool($pool);

		$this->assertAttributeEquals('conn-name', 'connection_name', $this->object, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::setConnection
	 */
	public function testSetConnection()
	{
		$expected = 'conn-name';
		$actual = $this->object->setConnection($expected);
		$msg = 'Wrong PdoAdapter::setConnection() behavior';
		$this->assertAttributeEquals(null, 'resource', $this->object, $msg);
		$this->assertAttributeEquals('conn-name', 'connection_name', $this->object, $msg);

		$msg = 'Wrong PdoAdapter::setConnection() return value';
		$this->assertSame($this->object, $actual, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::getResource
	 */
	public function testGetResource()
	{
		$expected = 100;
		$conn = $this->getMockBuilder('\Veles\DataBase\Connections\PdoConnection')
			->setConstructorArgs(['master'])
			->setMethods(['getResource'])
			->getMock();
		$conn->expects($this->once())
			->method('getResource')
			->willReturn($expected);

		$pool = $this->getMockBuilder('\Veles\DataBase\ConnectionPools\ConnectionPool')
			->setMethods(['getConnection'])
			->getMock();
		$pool->expects($this->once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->getResource();
		$msg = 'Wrong PdoAdapter::getResource() return value';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::value
	 * @covers Veles\DataBase\Adapters\PdoAdapter::prepare
	 */
	public function testValueWithoutType()
	{
		$expected = 100;

		$stmt = $this->getMockBuilder('\PDOStatement')
			->setMethods(['fetchColumn'])
			->getMock();
		$stmt->expects($this->once())
			->method('fetchColumn')
			->willReturn($expected);

		$resource = $this->getMockBuilder('\PDO')
			->disableOriginalConstructor()
			->setMethods(['prepare'])
			->getMock();
		$resource->expects($this->once())
			->method('prepare')
			->willReturn($stmt);

		$conn = $this->getMockBuilder('\Veles\DataBase\Connections\PdoConnection')
			->setConstructorArgs(['master'])
			->setMethods(['getResource'])
			->getMock();
		$conn->expects($this->once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder('\Veles\DataBase\ConnectionPools\ConnectionPool')
			->setMethods(['getConnection'])
			->getMock();
		$pool->expects($this->once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->value('sql query', [], null);
		$msg = 'PdoAdapter::value returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::value
	 * @covers Veles\DataBase\Adapters\PdoAdapter::prepare
	 * @covers Veles\DataBase\Adapters\PdoAdapter::bindParams
	 */
	public function testValueWithType()
	{
		//$this->markTestIncomplete('not completed');
		$expected = 100;

		$stmt = $this->getMockBuilder('\PDOStatement')
			->setMethods(['fetchColumn', 'bindValue'])
			->getMock();
		$stmt->expects($this->once())
			->method('fetchColumn')
			->willReturn($expected);
		$stmt->expects($this->exactly(2))
			->method('bindValue')
			->withConsecutive(
				[$this->equalTo(1), $this->equalTo(200), $this->equalTo(PDO::PARAM_INT)],
				[$this->equalTo(2), $this->equalTo('string'), $this->equalTo(PDO::PARAM_STR)]
			)
			->willReturn($expected);

		$resource = $this->getMockBuilder('\PDO')
			->disableOriginalConstructor()
			->setMethods(['prepare'])
			->getMock();
		$resource->expects($this->once())
			->method('prepare')
			->willReturn($stmt);

		$conn = $this->getMockBuilder('\Veles\DataBase\Connections\PdoConnection')
			->setConstructorArgs(['master'])
			->setMethods(['getResource'])
			->getMock();
		$conn->expects($this->once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder('\Veles\DataBase\ConnectionPools\ConnectionPool')
			->setMethods(['getConnection'])
			->getMock();
		$pool->expects($this->once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);

		$actual = $this->object->value('sql query', [200, 'string'], 'is');
		$msg = 'PdoAdapter::value returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::value
	 * @covers Veles\DataBase\Adapters\PdoAdapter::prepare
	 * @covers Veles\DataBase\Adapters\PdoAdapter::throwExceptionWithInfo
	 *
	 * @expectedException \Veles\DataBase\Exceptions\DbException
	 */
	public function testValueException()
	{
		//$this->markTestIncomplete('not completed');
		$exception_msg = 'SQLSTATE[22P02]: Invalid text representation: 7 ERROR: invalid input syntax for integer';
		$resource = $this->getMockBuilder('\PDO')
			->disableOriginalConstructor()
			->setMethods(['prepare'])
			->getMock();
		$resource->expects($this->once())
			->method('prepare')
			->will($this->throwException(new \PDOException($exception_msg)));

		$conn = $this->getMockBuilder('\Veles\DataBase\Connections\PdoConnection')
			->setConstructorArgs(['master'])
			->setMethods(['getResource'])
			->getMock();
		$conn->expects($this->once())
			->method('getResource')
			->willReturn($resource);

		$pool = $this->getMockBuilder('\Veles\DataBase\ConnectionPools\ConnectionPool')
			->setMethods(['getConnection'])
			->getMock();
		$pool->expects($this->once())
			->method('getConnection')
			->willReturn($conn);

		$this->object->setPool($pool);
		$sql    = 'SELECT * FROM users';
		$params = [300, 'string-value'];
		$types  = 'is';

		$this->object->value($sql, $params, $types);
	}
}
