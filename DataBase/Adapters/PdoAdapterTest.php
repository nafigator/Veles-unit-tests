<?php
namespace Veles\Tests\DataBase\Adapters;

use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\Db;
use Veles\DataBase\Exceptions\DbException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-10 at 15:41:03.
 * @group database
 */
class PdoAdapterTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var PdoAdapter
	 */
	protected $object;

	protected static $tbl_name;

	public static function setUpBeforeClass()
	{
		// Создаём тестовую таблицу в базе
		static::$tbl_name = 'veles_unit_test' . mt_rand(1000, 9999);
		$tbl_name = static::$tbl_name;

		Db::query("
			CREATE TABLE IF NOT EXISTS $tbl_name (
				id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
				txt CHAR(50) NOT NULL DEFAULT ''
			) ENGINE INNODB
		");

		$arr = [];
		$i = 0;
		while (++$i <= 10) {
			$arr[] = 'test-value';
		}

		$values = implode("'),('", $arr);
		Db::query("INSERT INTO $tbl_name (txt) VALUES ('$values')");
	}

	public static function tearDownAfterClass()
	{
		$table =& static::$tbl_name;
		Db::query("DROP TABLE $table");
	}

	public function tearDown()
	{
		Db::connection('master');
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::value
	 * @covers Veles\DataBase\Adapters\PdoAdapter::bindParams
	 * @covers Veles\DataBase\Adapters\PdoAdapter::throwExceptionWithInfo
	 */
	public function testValue()
	{
		$expected = (string) mt_rand();
		$result = Db::value("SELECT $expected, 2, 3");

		$msg = 'Wrong PdoAdapter::getValue() result';
		$this->assertSame($expected, $result, $msg);

		$tbl_name = static::$tbl_name;
		$result = Db::value("
			SELECT $expected, 2, 3
			FROM $tbl_name
			WHERE 2 = ?
		", [2], 'i');

		$msg = 'Wrong PdoAdapter::getValue() result';
		$this->assertSame($expected, $result, $msg);

		$sql = 'Veles = ?';
		$param = ['param'];
		try { Db::value($sql, $param); } catch (DbException $e) {}

		$msg = 'Wrong Db::value() behavior!';
		$this->assertSame($sql, $e->getSql(), $msg);

		$msg = 'Wrong Db::value() behavior!';
		$this->assertSame($param, $e->getParams(), $msg);

		$msg = 'Wrong Db::value() behavior!';
		$this->assertInstanceOf('\PDOException', $e->getPrevious(), $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::row
	 * @covers Veles\DataBase\Adapters\PdoAdapter::bindParams
	 * @covers Veles\DataBase\Adapters\PdoAdapter::prepare
	 */
	public function testGetRow()
	{
		$tbl_name = static::$tbl_name;
		$expected = ['id' => '1', 'txt' => 'test-value'];
		$result = Db::row("SELECT * FROM $tbl_name LIMIT 3");

		$msg = 'Wrong PdoAdapter::getRow() result';
		$this->assertSame($expected, $result, $msg);

		$result = Db::row("
			SELECT * FROM $tbl_name LIMIT ?
		", [3], 'i');

		$msg = 'Wrong PdoAdapter::getRow() result';
		$this->assertSame($expected, $result, $msg);

		$sql = 'Veles = ?';
		$param = ['param'];
		try { Db::row($sql, $param); } catch (DbException $e) {}

		$msg = 'Wrong Db::row() behavior!';
		$this->assertSame($sql, $e->getSql(), $msg);

		$msg = 'Wrong Db::row() behavior!';
		$this->assertSame($param, $e->getParams(), $msg);

		$msg = 'Wrong Db::row() behavior!';
		$this->assertInstanceOf('\PDOException', $e->getPrevious(), $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::rows
	 * @covers Veles\DataBase\Adapters\PdoAdapter::bindParams
	 */
	public function testRows()
	{
		$tbl_name = static::$tbl_name;
		$expected = [
			['id' => '1', 'txt' => 'test-value'],
			['id' => '2', 'txt' => 'test-value'],
			['id' => '3', 'txt' => 'test-value'],
		];
		$result = Db::rows("SELECT * FROM $tbl_name LIMIT 3");

		$msg = 'Wrong PdoAdapter::getRows() result';
		$this->assertSame($expected, $result, $msg);

		$result = Db::rows("
			SELECT * FROM $tbl_name LIMIT ?
		", [3], 'i');

		$msg = 'Wrong PdoAdapter::getRows() result';
		$this->assertSame($expected, $result, $msg);

		$sql = 'Veles = ?';
		$param = ['param'];
		try { Db::rows($sql, $param); } catch (DbException $e) {}

		$msg = 'Wrong Db::rows() behavior!';
		$this->assertSame($sql, $e->getSql(), $msg);

		$msg = 'Wrong Db::rows() behavior!';
		$this->assertSame($param, $e->getParams(), $msg);

		$msg = 'Wrong Db::rows() behavior!';
		$this->assertInstanceOf('\PDOException', $e->getPrevious(), $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::begin
	 * @covers Veles\DataBase\Adapters\PdoAdapter::rollback
	 * @covers Veles\DataBase\Adapters\PdoAdapter::commit
	 */
	public function testTransactions()
	{
		$tbl_name = static::$tbl_name;
		$expected = ['id' => '222', 'txt' => 'test-value'];

		Db::begin();
		Db::query("INSERT $tbl_name VALUES (222, 'test-value')");
		PdoAdapter::instance()->commit();
		$result = Db::row("SELECT * FROM $tbl_name WHERE id = 222");

		$msg = 'Wrong PdoAdapter transaction test result';
		$this->assertSame($expected, $result, $msg);

		$expected = false;
		Db::begin();
		Db::query("INSERT $tbl_name VALUES (333, 'test-value')");
		PdoAdapter::instance()->rollback();
		$result = Db::row("SELECT * FROM $tbl_name WHERE id = 333");

		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::begin
	 * @expectedException \Veles\DataBase\Exceptions\DbException
	 */
	public function testBeginException()
	{
		Db::connection('fake');
		Db::begin();
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::rollback
	 * @expectedException \Veles\DataBase\Exceptions\DbException
	 */
	public function testRollbackException()
	{
		Db::connection('fake');
		PdoAdapter::instance()->rollback();
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::commit
	 * @expectedException \Veles\DataBase\Exceptions\DbException
	 */
	public function testCommitException()
	{
		Db::connection('fake');
		PdoAdapter::instance()->commit();
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::query
	 * @covers Veles\DataBase\Adapters\PdoAdapter::bindParams
	 */
	public function testQuery()
	{
		$tbl_name = static::$tbl_name;
		$expected = true;
		$result = Db::query("DELETE FROM $tbl_name WHERE id > 8");

		$msg = 'Wrong PdoAdapter::query() result';
		$this->assertSame($expected, $result, $msg);

		$result = Db::query("DELETE FROM $tbl_name WHERE id > ?", [8]);

		$msg = 'Wrong PdoAdapter::query() result';
		$this->assertSame($expected, $result, $msg);

		$result = Db::query("
			DELETE FROM $tbl_name WHERE id > ?
		", [8], 'i');

		$msg = 'Wrong PdoAdapter::query() result';
		$this->assertSame($expected, $result, $msg);

		$sql = 'Veles = ?';
		$param = ['param'];
		try { Db::query($sql, $param); } catch (DbException $e) {}

		$msg = 'Wrong Db::query() behavior!';
		$this->assertSame($sql, $e->getSql(), $msg);

		$msg = 'Wrong Db::query() behavior!';
		$this->assertSame($param, $e->getParams(), $msg);

		$msg = 'Wrong Db::query() behavior!';
		$this->assertInstanceOf('\PDOException', $e->getPrevious(), $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::getLastInsertId
	 */
	public function testGetLastInsertId()
	{
		$tbl_name = static::$tbl_name;
		$expected = 11;

		Db::query("INSERT $tbl_name VALUES (11, 'test-value')");
		$result = PdoAdapter::instance()->getLastInsertId();

		$msg = 'Wrong PdoAdapter::getLastInsertId() result';
		$this->assertSame($expected, $result, $msg);

		Db::connection('fake');
		try {
			PdoAdapter::instance()->getLastInsertId();
		} catch (DbException $e) {
			Db::connection('master');
		}

		$msg = 'Wrong Db::getLastInsertId() behavior!';
		$this->assertInstanceOf('\PDOException', $e->getPrevious(), $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::getFoundRows
	 */
	public function testGetFoundRows()
	{
		$tbl_name = static::$tbl_name;
		$expected = 9;

		Db::query("SELECT SQL_CALC_FOUND_ROWS * FROM $tbl_name LIMIT 0, 5");
		$result = PdoAdapter::instance()->getFoundRows();

		$msg = 'Wrong PdoAdapter::geFoundRows() result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::getStmt
	 */
	public function testGetStmt()
	{
		$result = PdoAdapter::instance()->getStmt();

		$msg = 'Wrong PdoAdapter::getStmt() result';
		$this->assertInstanceOf('PDOStatement', $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\PdoAdapter::escape
	 */
	public function testEscape()
	{
		$expected = '\'\\\\\\\'\"\'';

		$result = PdoAdapter::instance()->escape("\'\"");

		$msg = 'Wrong PdoAdapter::escape() result';
		$this->assertSame($expected, $result, $msg);

		Db::connection('fake');
		try {
			PdoAdapter::instance()->escape($expected);
		} catch (DbException $e) {
			Db::connection('master');
		}

		$msg = 'Wrong Db::escape() behavior!';
		$this->assertInstanceOf('\PDOException', $e->getPrevious(), $msg);
	}
}
