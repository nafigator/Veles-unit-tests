<?php
namespace Veles\Tests\DataBase\Adapters;

use Veles\DataBase\ConnectionPools\ConnectionPool;
use Veles\DataBase\Connections\PdoConnection;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-10 at 15:40:14.
 * @group database
 */
class DbAdapterBaseTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var PdoAdapterCopy
	 */
	protected $object;

	private static $pool_backup;

	public static function setUpBeforeClass()
	{
		self::$pool_backup = PdoAdapterCopy::getPool();
	}

	public static function tearDownAfterClass()
	{
		PdoAdapterCopy::setPool(self::$pool_backup);
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new PdoAdapterCopy;
	}

	/**
	 * @covers Veles\DataBase\Adapters\DbAdapterBase::getPool
	 */
	public function testGetPool()
	{
		$expected = new ConnectionPool();
		$this->object->setPool($expected);

		$result = $this->object->getPool();
		$msg = 'Wrong DbAdapterBase::getPool() behavior';
		$this->assertSame($expected, $result, $msg);
		$this->assertAttributeEquals(null, 'connection_name', $this->object, $msg);

		$this->object->setPool(self::$pool_backup);
	}

	/**
	 * @covers Veles\DataBase\Adapters\DbAdapterBase::setPool
	 */
	public function testSetPool()
	{
		$pool = new ConnectionPool;

		$this->object->setPool($pool);
		$msg = 'Wrong DbAdapterBase::setPool() behavior';
		$this->assertAttributeEquals($pool, 'pool', $this->object, $msg);
		$this->assertAttributeEquals(null, 'connection_name', $this->object, $msg);

		$pool = new ConnectionPool;
		$connection = new PdoConnection('conn-name');
		$pool->addConnection($connection, true);
		$this->object->setPool($pool);

		$this->assertAttributeEquals('conn-name', 'connection_name', $this->object, $msg);

		$this->object->setPool(self::$pool_backup);
	}

	/**
	 * @covers Veles\DataBase\Adapters\DbAdapterBase::setConnection
	 */
	public function testSetConnection()
	{
		$expected = 'conn-name';
		$result = $this->object->setConnection($expected);
		$msg = 'Wrong DbAdapterBase::setConnection() behavior';
		$this->assertAttributeEquals(null, 'connection', $this->object, $msg);
		$this->assertAttributeEquals('conn-name', 'connection_name', $this->object, $msg);

		$msg = 'Wrong DbAdapterBase::setConnection() return value';
		$this->assertSame($this->object, $result, $msg);

		$this->object->setConnection('master');
	}

	/**
	 * @covers Veles\DataBase\Adapters\DbAdapterBase::getConnection
	 */
	public function testGetConnection()
	{
		$this->object->setPool(self::$pool_backup);

		$result = $this->object->getConnection();
		$msg = 'Wrong DbAdapterBase::getConnection() return value';
		$this->assertInstanceOf('PDO', $result, $msg);

		$result = $this->object->getConnection();
		$msg = 'Wrong DbAdapterBase::getConnection() return value';
		$this->assertInstanceOf('PDO', $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Adapters\DbAdapterBase::instance
	 */
	public function testInstance()
	{
		$this->object->unsetInstance();
		$result = $this->object->instance();

		$msg = 'Wrong DbAdapterBase::instance() return value';
		$this->assertInstanceOf('Veles\DataBase\Adapters\PdoAdapter', $result, $msg);

		$result = $this->object->instance();

		$msg = 'Wrong DbAdapterBase::instance() return value';
		$this->assertInstanceOf('Veles\DataBase\Adapters\PdoAdapter', $result, $msg);
	}
}
