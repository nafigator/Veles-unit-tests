<?php
namespace Veles\Tests\DataBase;

use Exception;
use Veles\DataBase\Adapters\iDbAdapter;
use Veles\DataBase\Adapters\PdoAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-11 at 15:34:36.
 * @group db
 */
class DbTest extends \PHPUnit_Framework_TestCase
{
	protected static $tbl_name;

	public static function setUpBeforeClass()
	{
		// Создаём тестовую таблицу в базе
		$tbl_name = static::$tbl_name = 'veles_unit_test' . mt_rand(1000, 9999);

		DbCopy::unsetAdapter();
		DbCopy::setAdapter(PdoAdapter::instance());
		DbCopy::query("
			CREATE TABLE IF NOT EXISTS $tbl_name (
				id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
				txt CHAR(50) NOT NULL DEFAULT ''
			) ENGINE INNODB
		");

		$arr = [];
		$i = 0;
		while (++$i <= 10) {
			$arr[] = 'test-value';
		}

		$values = implode("'),('", $arr);
		DbCopy::query("INSERT INTO $tbl_name (txt) VALUES ('$values')");
	}

	public static function tearDownAfterClass()
	{
		$table =& static::$tbl_name;
		DbCopy::query("DROP TABLE $table");
	}

	/**
	 * @covers Veles\DataBase\Db::setAdapter
	 */
	public function testSetAdapter()
	{
		$expected = PdoAdapter::instance();
		DbCopy::setAdapter(PdoAdapter::instance());

		$msg = 'Wrong DbCopy::$adapter property value!';
		$this->assertAttributeEquals(
			$expected, 'adapter', 'Veles\Tests\DataBase\DbCopy', $msg
		);
	}

	/**
	 * @covers Veles\DataBase\Db::getAdapter
	 */
	public function testGetAdapter()
	{
		DbCopy::unsetAdapter();
		DbCopy::setAdapter(PdoAdapter::instance());

		$result = DbCopy::getAdapter();
		$this->assertTrue($result instanceof iDbAdapter);
	}

	/**
	 * @covers Veles\DataBase\Db::getAdapter
	 * @expectedException Exception
	 * @expectedExceptionMessage Adapter not set!
	 */
	public function testGetAdapterException()
	{
		DbCopy::unsetAdapter();
		DbCopy::getAdapter();
	}

	/**
	 * @covers Veles\DataBase\Db::connection
	 */
	public function testConnection()
	{
		$expected = 'master';

		$this->assertAttributeEquals(
			$expected,
			'connection_name',
			'\Veles\DataBase\Adapters\PdoAdapter',
			'Wrong DbCopy::connection() behavior'
		);

		DbCopy::setAdapter(PdoAdapter::instance());
		DbCopy::connection($expected);

		$this->assertAttributeEquals(
			$expected,
			'connection_name',
			'\Veles\DataBase\Adapters\PdoAdapter',
			'Wrong DbCopy::connection() behavior'
		);
	}

	/**
	 * @covers Veles\DataBase\Db::value
	 */
	public function testValue()
	{
		DbCopy::setAdapter(PdoAdapter::instance());
		$expected = (string) mt_rand();
		$result = DbCopy::value("SELECT $expected, 2, 3");

		$msg = 'Wrong DbCopy::value() result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::row
	 */
	public function testRow()
	{
		$tbl_name = static::$tbl_name;
		$expected = ['id' => '1', 'txt' => 'test-value'];
		$result = DbCopy::row("
			SELECT * FROM $tbl_name LIMIT 3
		");

		$msg = 'Wrong DbCopy::row() result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::rows
	 */
	public function testRows()
	{
		$tbl_name = static::$tbl_name;
		$expected = [
			['id' => '1', 'txt' => 'test-value'],
			['id' => '2', 'txt' => 'test-value'],
			['id' => '3', 'txt' => 'test-value'],
		];
		$result = DbCopy::rows("
			SELECT * FROM $tbl_name LIMIT 3
		");

		$msg = 'Wrong DbCopy::rows() result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::begin
	 * @covers Veles\DataBase\Db::rollback
	 * @covers Veles\DataBase\Db::commit
	 */
	public function testTransactions()
	{
		$tbl_name = static::$tbl_name;
		$expected = ['id' => '222', 'txt' => 'test-value'];

		DbCopy::begin();
		DbCopy::query("
			INSERT $tbl_name VALUES (222, 'test-value')
		");
		DbCopy::commit();
		$result = DbCopy::row("
			SELECT * FROM $tbl_name WHERE id = 222
		");

		$msg = 'Wrong DbCopy::transaction() test result';
		$this->assertSame($expected, $result, $msg);

		$expected = false;
		DbCopy::begin();
		DbCopy::query("
			INSERT $tbl_name VALUES (333, 'test-value')
		");
		DbCopy::rollback();
		$result = DbCopy::row("
			SELECT * FROM $tbl_name WHERE id = 333
		");

		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::query
	 */
	public function testQuery()
	{
		$tbl_name = static::$tbl_name;
		$expected = true;
		$result = DbCopy::query("
			DELETE FROM $tbl_name WHERE id > :id
		", [':id' => 8]);

		$msg = 'Wrong DbCopy::query result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::getLastInsertId
	 */
	public function testGetLastInsertId()
	{
		$tbl_name = static::$tbl_name;
		$expected = 11;

		DbCopy::query("
			INSERT $tbl_name VALUES (11, 'test-value')
		");
		$result = DbCopy::getLastInsertId();

		$msg = 'Wrong DbCopy::getLastInsertId() result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::getFoundRows
	 */
	public function testGetFoundRows()
	{
		$tbl_name = static::$tbl_name;
		$expected = 9;

		DbCopy::query("
			SELECT SQL_CALC_FOUND_ROWS * FROM $tbl_name LIMIT 0, 5
		");
		$result = DbCopy::getFoundRows();

		$msg = 'Wrong DbCopy::getFoundRows() result';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\Db::escape
	 */
	public function testEscape()
	{
		$expected = '\'\\\\\\\'\"\'';

		$result = DbCopy::escape("\'\"");

		$msg = 'Wrong DbCopy::escape() result';
		$this->assertSame($expected, $result, $msg);
	}
}
