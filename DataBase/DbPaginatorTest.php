<?php
namespace Veles\Tests\DataBase;

use PHPUnit\Framework\TestCase;
use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\Db;
use Veles\DataBase\DbFilter;
use Veles\DataBase\DbPaginator;
use Veles\Tests\Model\News;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-27 at 18:28:23.
 */
class DbPaginatorTest extends TestCase
{
	/**
	 * @var DbPaginator
	 */
	protected $object;
	/**
	 * Final HTML output
	 * @var string
	 */
	protected $html;

	protected function setUp(): void
	{
		$this->object = new DbPaginator(realpath(__DIR__ . '/../Project/View/paginator_default.phtml'));
		$this->html = <<<EOL
	<a href="/page-1.html">&laquo;</a>
		<a href="/page-2.html" class="pager-margin">2</a>
			<a href="/page-3.html" class="pager-margin">3</a>
			<a href="/page-4.html" class="pager-margin">4</a>
				<span class="curr pager-margin">5</span>
					<a href="/page-6.html" class="pager-margin">6</a>
			<a href="/page-7.html" class="pager-margin">7</a>
			<a href="/page-8.html" class="pager-margin">8</a>
		<a href="/page-20.html" class="pager-margin">&raquo;</a>

EOL;
	}

	protected function tearDown(): void
	{
		DbCopy::unsetAdapter();
	}

	public function test__toString(): void
	{
		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->onlyMethods(['rows', 'getFoundRows'])
			->getMock();
		$adapter->expects(self::once())
			->method('rows')
			->willReturn([1, 2, 3]);
		$adapter->expects(self::once())
			->method('getFoundRows')
			->willReturn(20);

		Db::setAdapter($adapter);

		$this->expectOutputString($this->html);

		$template = realpath(__DIR__ . '/../Project/View/paginator_default.phtml');
		$pager = new DbPaginator($template, 5);
		$news = new News;
		$pager->setLimit(1);
		$news->getAll(new DbFilter, $pager);

		echo $pager;
	}

	public function testGetOffset(): void
	{
		$expected = 0;
		$result = $this->object->getOffset();
		$msg = 'DbPaginator::getOffset() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}

	/**
	 * @dataProvider getLimitProvider
	 */
	public function testGetLimit($limit, $expected): void
	{
		$this->object->setLimit($limit);
		$result = $this->object->getLimit();
		$msg = 'DbPaginator::getLimit() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}

	public function getLimitProvider(): array
	{
		return [
			[40, 40],
			['ab', 5],
			['25', 25],
		];
	}

	public function testGetSqlLimit(): void
	{
		$expected = ' LIMIT 0, 5';
		$result = $this->object->getSqlLimit();
		$msg = 'DbPaginator::getSqlLimit() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}

	public function testGetMaxPages(): void
	{
		$expected = 4;

		$adapter = $this->getMockBuilder(PdoAdapter::class)
			->onlyMethods(['getFoundRows'])
			->getMock();
		$adapter->expects(self::once())
			->method('getFoundRows')
			->willReturn(20);

		Db::setAdapter($adapter);

		$actual = $this->object->getMaxPages();
		$msg = 'DbPaginator::getMaxPages() returns wrong result!';
		self::assertSame($expected, $actual, $msg);

		$actual = $this->object->getMaxPages();
		$msg = 'DbPaginator::getMaxPages() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetCurrPage(): void
	{
		$expected = 1;
		$result = $this->object->getCurrPage();
		$msg = 'DbPaginator::getCurrPage() returns wrong result!';
		self::assertSame($expected, $result, $msg);

		$expected = 5;
		$object = new DbPaginator('', 5);
		$result = $object->getCurrPage();
		$msg = 'DbPaginator::getCurrPage() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}
}
