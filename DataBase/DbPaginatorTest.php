<?php
namespace Veles\Tests\DataBase;

use Veles\DataBase\Adapters\PdoAdapter;
use Veles\DataBase\DbFilter;
use Veles\DataBase\DbPaginator;
use Veles\Tests\Model\News;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-27 at 18:28:23.
 */
class DbPaginatorTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var DbPaginator
	 */
	protected $object;
	/**
	 * Final HTML output
	 * @var string
	 */
	protected $html;
	protected static $tbl_name;

	public static function setUpBeforeClass()
	{
		// Create test table
		$tbl_name = static::$tbl_name = News::TBL_NAME;

		DbCopy::setAdapter(PdoAdapter::instance());
		DbCopy::query("
			CREATE TABLE IF NOT EXISTS $tbl_name (
			  id int(10) unsigned NOT NULL,
			  title char(30) NOT NULL,
			  content char(60) NOT NULL,
			  author char(30) NOT NULL,
			  PRIMARY KEY (id)
			) ENGINE=INNODB DEFAULT CHARSET=utf8
		");
		for ($i = 0; $i < 20; ++$i) {
			DbCopy::query("
				INSERT INTO $tbl_name
					(id, title, content, author)
				VALUES
					(?, ?, ?, ?)
			", [$i, uniqid(), uniqid(), uniqid()], 'isss');
		}
	}

	public static function tearDownAfterClass()
	{
		$table =& static::$tbl_name;
		DbCopy::query("DROP TABLE $table");
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new DbPaginator(realpath(__DIR__ . '/../Project/View/paginator_default.phtml'));
		$this->html = <<<EOL
	<a href="/page-1.html">&laquo;</a>
		<a href="/page-2.html" class="pager-margin">2</a>
			<a href="/page-3.html" class="pager-margin">3</a>
			<a href="/page-4.html" class="pager-margin">4</a>
				<span class="curr pager-margin">5</span>
					<a href="/page-6.html" class="pager-margin">6</a>
			<a href="/page-7.html" class="pager-margin">7</a>
			<a href="/page-8.html" class="pager-margin">8</a>
		<a href="/page-20.html" class="pager-margin">&raquo;</a>

EOL;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::__toString
	 */
	public function test__toString()
	{
		$this->expectOutputString($this->html);

		$template = realpath(__DIR__ . '/../Project/View/paginator_default.phtml');
		$pager = new DbPaginator($template, 5);
		$news = new News;
		$pager->setLimit(1);
		$news->getAll(new DbFilter, $pager);

		echo $pager;
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::getOffset
	 */
	public function testGetOffset()
	{
		$expected = 0;
		$result = $this->object->getOffset();
		$msg = 'DbPaginator::getOffset() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::getLimit
	 */
	public function testGetLimit()
	{
		$expected = 40;
		$this->object->setLimit($expected);
		$result = $this->object->getLimit();
		$msg = 'DbPaginator::getLimit() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::setLimit
	 * @dataProvider setLimitProvider
	 */
	public function testSetLimit($limit, $expected)
	{
		$this->object->setLimit($limit);
		$msg = 'Wrong DbPaginator::setLimit() behavior!';
		$this->assertAttributeSame($expected, 'limit', $this->object, $msg);
	}

	public function setLimitProvider()
	{
		return [
			['bad_text', 5],
			[10, 10],
			['200', 200]
		];
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::getSqlLimit
	 */
	public function testGetSqlLimit()
	{
		$expected = ' LIMIT 0, 5';
		$result = $this->object->getSqlLimit();
		$msg = 'DbPaginator::getSqlLimit() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::getMaxPages
	 * @covers Veles\Model\QueryBuilder::setPage
	 */
	public function testGetMaxPages()
	{
		$expected = 4;
		$news = new News;
		$news->getAll();

		$result = $this->object->getMaxPages();
		$msg = 'DbPaginator::getMaxPages() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		$expected = 5;
		$news = new News;
		$this->object->setLimit(4);
		$filter = new DbFilter;
		$news->getAll($filter, $this->object);

		$result = $this->object->getMaxPages();
		$msg = 'DbPaginator::getMaxPages() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::calcMaxPages
	 */
	public function testCalcMaxPages()
	{
		$expected = 5;
		$news = new News;
		$this->object->setLimit(4);
		$filter = new DbFilter;
		$news->getAll($filter, $this->object);

		$msg = 'Wrong DbPaginator::calcMaxPages() behavior!';
		$this->assertAttributeSame($expected, 'page_nums',$this->object, $msg);
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::getCurrPage

	 */
	public function testGetCurrPage()
	{
		$expected = 1;
		$result = $this->object->getCurrPage();
		$msg = 'DbPaginator::getCurrPage() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		$expected = 5;
		$object = new DbPaginator('', 5);
		$result = $object->getCurrPage();
		$msg = 'DbPaginator::getCurrPage() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers Veles\DataBase\DbPaginator::__construct
	 */
	public function testConstruct()
	{
		$expected = 'paginator_default.phtml';
		$object = new DbPaginator($expected);
		$msg = 'Wrong DbPaginator::__construct() behavior!';
		$this->assertAttributeSame($expected, 'template', $object, $msg);
	}
}
