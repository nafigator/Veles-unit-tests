<?php
namespace Veles\Tests\Cache;

use Exception;
use Memcached;
use PHPUnit\Framework\TestCase;
use Veles\Cache\Adapters\CacheAdapterInterface;
use Veles\Cache\Adapters\MemcachedAdapter;
use Veles\Cache\Adapters\MemcacheRaw;
use Veles\Tests\Cache\Adapters\MemcachedAdapterChild;

require_once 'Adapters/fsockopen_stub.php';
require_once 'Adapters/fclose_stub.php';
require_once 'Adapters/fgets_stub.php';
require_once 'Adapters/fwrite_stub.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-02 at 17:46:39.
 * @group cache
 */
class CacheTest extends TestCase
{
	public static function setUpBeforeClass()
	{
		MemcachedAdapterChild::unsetInstance();
	}

	/**
	 * @covers       \Veles\Cache\Cache::setAdapter
	 * @dataProvider setAdapterProvider
	 *
	 * @param CacheAdapterInterface $adapter Adapter
	 */
	public function testSetAdapter($adapter)
	{
		$expected = $adapter;
		Cache::setAdapter($adapter);

		$msg = 'Wrong Cache::$adapter property value!';
		$this->assertAttributeEquals(
			$expected, 'adapter', 'Veles\Tests\Cache\Cache', $msg
		);
	}

	public function setAdapterProvider()
	{
		return [
			[MemcachedAdapter::instance()]
		];
	}

	/**
	 * @covers \Veles\Cache\Cache::getAdapter
	 * @depends testSetAdapter
	 */
	public function testGetAdapter()
	{
		Cache::setAdapter(MemcachedAdapter::instance());
		$result = Cache::getAdapter();

		$this->assertTrue($result instanceof MemcachedAdapter);
	}

	/**
	 * @covers \Veles\Cache\Cache::getAdapter
	 * @expectedException Exception
	 */
	public function testSetAdapterException()
	{
		Cache::unsetAdapter();
		Cache::getAdapter();
	}

	/**
	 * @covers       \Veles\Cache\Cache::set
	 * @depends      testSetAdapter
	 * @depends      testGetAdapter
	 *
	 * @dataProvider setProvider
	 *
	 * @param $key
	 * @param $value
	 * @param $ttl
	 * @param $expected
	 */
	public function testSet($key, $value, $ttl, $expected)
	{
		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['set'])
			->getMock();

		$driver->method('set')
			->with($key, $value, $ttl)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);

		$actual = (0 === $ttl)
			? Cache::set($key, $value)
			: Cache::set($key, $value, $ttl);

		$msg = 'Wrong Cache::set() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	public function setProvider()
	{
		return [
			[
				uniqid('VELES::UNIT-TEST::'),
				uniqid(),
				rand(1, 100),
				true
			],
			[
				uniqid('VELES::UNIT-TEST::'),
				uniqid(),
				null,
				true
			]
		];
	}

	/**
	 * @covers       \Veles\Cache\Cache::add
	 * @depends      testSetAdapter
	 * @depends      testGetAdapter
	 *
	 * @dataProvider setProvider
	 *
	 * @param $key
	 * @param $value
	 * @param $ttl
	 * @param $expected
	 */
	public function testAdd($key, $value, $ttl, $expected)
	{
		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['add'])
			->getMock();

		$driver->method('add')
			->with($key, $value, $ttl)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);

		$actual = (0 === $ttl)
			? Cache::add($key, $value)
			: Cache::add($key, $value, $ttl);

		$msg = 'Wrong Cache::add() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Cache\Cache::get
	 * @depends testSetAdapter
	 * @depends testGetAdapter
	 */
	public function testGet()
	{
		$key = uniqid('VELES::UNIT-TEST::');
		$expected = uniqid();

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['get'])
			->getMock();

		$driver->method('get')
			->with($key)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = Cache::get($key);

		$msg = 'Wrong Cache::get() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Cache\Cache::has
	 * @depends testSetAdapter
	 * @depends testGetAdapter
	 */
	public function testHas()
	{
		$key = uniqid('VELES::UNIT-TEST::');
		$expected = true;

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['get'])
			->getMock();

		$driver->method('get')
			->with($key)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = Cache::has($key);

		$msg = 'Wrong Cache::has() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Cache\Cache::del
	 * @depends testSetAdapter
	 * @depends testGetAdapter
	 */
	public function testDel()
	{
		$key = uniqid('VELES::UNIT-TEST::');
		$expected = true;

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['delete'])
			->getMock();

		$driver->method('delete')
			->with($key)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = Cache::del($key);

		$msg = 'Wrong Cache::del() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers       \Veles\Cache\Cache::increment
	 * @dataProvider incrementProvider
	 *
	 * @param $key
	 * @param $offset
	 * @param $expected
	 */
	public function testIncrement($key, $offset, $expected)
	{
		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['increment'])
			->getMock();

		$driver->method('increment')
			->with($key, $offset)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = ($offset > 1)
			? Cache::increment($key, $offset)
			: Cache::increment($key);

		$msg = 'Wrong Cache::increment() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	public function incrementProvider()
	{
		return [
			[
				uniqid('VELES::UNIT-TEST::'),
				rand(2, 100),
				true
			],
			[
				uniqid('VELES::UNIT-TEST::'),
				1,
				true
			]
		];
	}

	/**
	 * @covers  \Veles\Cache\Cache::decrement
	 * @dataProvider incrementProvider
	 *
	 * @param $key
	 * @param $offset
	 * @param $expected
	 */
	public function testDecrement($key, $offset, $expected)
	{
		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['decrement'])
			->getMock();

		$driver->method('decrement')
			->with($key, $offset)
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = ($offset > 1)
			? Cache::decrement($key, $offset)
			: Cache::decrement($key);

		$msg = 'Wrong Cache::decrement() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Cache\Cache::clear
	 * @depends testSet
	 */
	public function testClear()
	{
		$key = uniqid('VELES::UNIT-TEST::');
		$expected = true;

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->setMethods(['flush'])
			->getMock();

		$driver->method('flush')
			->willReturn($expected);

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = Cache::clear($key);

		$msg = 'Wrong Cache::clear() result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Cache\Cache::delByTemplate
	 * @depends testSetAdapter
	 * @depends testGetAdapter
	 */
	public function testDelByTemplate()
	{
		$host = 'VELES_UNIT_TEST_MEMCACHED_ADAPTER';
		$port = rand(10600, 15000);

		MemcacheRaw::setConnectionParams($host, $port);

		$tpl = uniqid('VELES::UNIT-TEST::');
		$expected = true;

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)->getMock();

		$adapter = new MemcachedAdapterChild($driver);
		Cache::setAdapter($adapter);
		$actual = Cache::delByTemplate($tpl);

		$msg = 'Wrong Cache::delByTemplate() result!';
		$this->assertSame($expected, $actual, $msg);
	}
}
