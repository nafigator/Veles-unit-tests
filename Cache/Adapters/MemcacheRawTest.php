<?php
namespace Veles\Tests\Cache\Adapters;

use Exception;
use PHPUnit\Framework\TestCase;
use Veles\Cache\Adapters\MemcacheRaw;

require_once 'fsockopen_stub.php';
require_once 'fclose_stub.php';
require_once 'fgets_stub.php';
require_once 'fwrite_stub.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-23 at 18:02:03.
 * @group memcacheraw
 */
class MemcacheRawTest extends TestCase
{
	public function testConstructor(): void
	{
		$host = 'VELES_UNIT_TEST';
		$port = rand(10600, 15000);

		$expected = [
			'host' => $host,
			'port' => $port,
			'errno'  => null,
			'errstr' => null
		];

		MemcacheRaw::setConnectionParams($host, $port);

		$object = new MemcacheRawChild;
		$actual = $object->getConnection();

		$msg = 'MemcacheRaw::__construct() wrong behavior';
		self::assertSame($expected, $actual, $msg);
	}

	public function testConstructException(): void
	{
		$this->expectException(Exception::class);
		$this->expectExceptionMessage('Can not connect to Memcache. Host: localhost Port: 11213');

		MemcacheRaw::setConnectionParams('localhost', 11213);

		new MemcacheRawChild;
	}

	public function testSetConnectionParams(): void
	{
		$host = 'VELES_UNIT_TEST';
		$port = rand(10600, 15000);

		MemcacheRaw::setConnectionParams($host, $port);
		$object = new MemcacheRawChild;

		$actual = $object->getHost();

		$msg = 'Wrong MemcacheRaw::$host result';
		self::assertSame($host, $actual, $msg);

		$actual = $object->getPort();

		$msg = 'Wrong MemcacheRaw::$port result';
		self::assertSame($port, $actual, $msg);
	}

	public function testDisconnect(): void
	{
		$host = 'VELES_UNIT_TEST';
		$port = rand(10600, 15000);
		$errno = $errstr = null;

		$expected_connection = compact('host', 'port', 'errno', 'errstr');

		MemcacheRaw::setConnectionParams($host, $port);
		$object = new MemcacheRawChild;

		$actual = $object->disconnect();

		$msg = 'MemcacheRaw::disconnect() return wrong result!';
		self::assertTrue($actual, $msg);

		$actual = $object->getConnection();

		$msg = 'Wrong type of MemcacheRaw::$connection!';
		self::assertSame($expected_connection, $actual, $msg);
	}

	public function testCommand(): void
	{
		$key   = uniqid('VELES::UNIT-TEST::');
		$host  = 'VELES_UNIT_TEST';
		$port  = rand(10600, 15000);

		$expected = true;

		MemcacheRaw::setConnectionParams($host, $port);
		$object = new MemcacheRawChild;

		$actual = $object->command("delete $key");

		$msg = 'MemcacheRaw::command() malfunction!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testDelByTemplate(): void
	{
		$host  = 'VELES_UNIT_TEST_DEL_BY_TEMPLATE';
		$port  = rand(10600, 15000);

		MemcacheRaw::setConnectionParams($host, $port);
		$object = new MemcacheRawChild;

		$template = "VELES::UNIT-TEST::59ea1be2795cd::";

		$actual = $object->delByTemplate($template);

		$msg = 'MemcacheRaw::delByTemplate return wrong result!';
		self::assertInstanceOf(MemcacheRaw::class, $actual, $msg);
	}

	public function testQuery(): void
	{
		$key   = 'VELES::UNIT-TEST::59ea24a876add';
		$value = '434';
		$host  = 'VELES_UNIT_TEST_QUERY';
		$port  = rand(10600, 15000);

		MemcacheRaw::setConnectionParams($host, $port);
		$object = new MemcacheRawChild;

		$output = $object->query("get $key");
		$expr = "/^VALUE $key [\d\s]+$value\s$/";
		$actual = preg_match($expr, $output);

		$msg = 'MemcacheRaw::query return wrong result!';
		self::assertSame(1, $actual, $msg);
	}
}
