<?php
namespace Veles\Tests\CurlRequest;

use PHPUnit\Framework\TestCase;
use Veles\CurlRequest\AuthStrategies\HttpBasic;
use Veles\CurlRequest\CurlRequest;

require_once 'curl_errno.php';
require_once 'curl_error.php';
require_once 'curl_getinfo.php';
require_once 'curl_close.php';
require_once 'curl_exec.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-23 at 11:21:35.
 *
 * @group curl-request
 */
class CurlRequestTest extends TestCase
{
	/**
	 * @var CurlRequest
	 */
	protected $object;
	/** @var string  */
	protected $url = 'http://localhost';

	protected function setUp(): void
	{
		$this->object = new CurlRequest($this->url);
	}

	public function testExec(): void
	{
		$expected = 'This is curl_exec result!';
		$actual   = $this->object->exec();

		$msg = 'CurlRequest::exec() return wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	/**
	 * @dataProvider getHeadersProvider
	 */
	public function testGetHeaders($expected): void
	{
		$this->object->setHeaders($expected);
		$actual = $this->object->getHeaders();

		$msg = 'CurlRequest::getHeaders() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function getHeadersProvider(): array
	{
		return [
			[['Content-type: text/plain', 'Content-length: 300']],
			[['Content-length: 100']]
		];
	}

	/**
	 * @dataProvider setOptionProvider
	 */
	public function testSetOption($option, $value): void
	{
		$actual = $this->object->setOption($option, $value);

		$msg = 'CurlRequest::setOption() returns wrong result!';
		self::assertSame($this->object, $actual, $msg);
	}

	public function setOptionProvider(): array
	{
		return [
			[
				CURLOPT_URL,
				'http://new-uri.ru'
			],
		];
	}

	/**
	 * @dataProvider setArrayOptionsProvider
	 */
	public function testSetArrayOptions($options): void
	{
		$actual = $this->object->setArrayOptions($options);

		$msg = 'CurlRequest::setArrayOptions() returns wrong result!';
		self::assertSame($this->object, $actual, $msg);
	}

	public function setArrayOptionsProvider(): array
	{
		return [
			[
				[CURLOPT_AUTOREFERER => true]
			]
		];
	}

	public function testSetAuth(): void
	{
		$auth = $this->getMockBuilder(HttpBasic::class)
			->onlyMethods(['apply'])
			->getMock();
		$auth->expects(self::once())
			->method('apply');

		$actual = $this->object->setAuth($auth);

		$msg = 'CurlRequest::setAuth() returns wrong result!';
		self::assertSame($this->object, $actual, $msg);
	}
}
