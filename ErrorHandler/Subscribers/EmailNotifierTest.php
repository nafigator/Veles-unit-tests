<?php
namespace Veles\Tests\ErrorHandler\Subscribers;

use PHPUnit\Framework\TestCase;
use Tests\ErrorHandler\Subscribers\UpdateTestHandler;
use Veles\ErrorHandler\ExceptionHandler;
use Veles\ErrorHandler\HtmlBuilders\ErrorBuilder;
use Veles\ErrorHandler\Subscribers\EmailNotifier;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-06 at 08:21:33.
 * @group error-handler
 */
class EmailNotifierTest extends TestCase
{
	/**
	 * @var EmailNotifier
	 */
	protected $object;
	protected $message = 'ERROR UNIT_TEST!';

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new EmailNotifier;
	}

	public function testUpdate(): void
	{
		$stub = $this->getMockBuilder('\Veles\ErrorHandler\Subscribers\EmailNotifier')
			->onlyMethods(['getMessageBuilder', 'init', 'send'])
			->getMock();

		$builder = new ErrorBuilder;
		$builder->setTemplate('Errors/exception.phtml');

		$stub->method('getMessageBuilder')->willReturn($builder);
		$stub->expects(self::once())->method('init')->willReturn(null);
		$stub->expects(self::once())->method('send')->willReturn(null);

		$exception = new \Exception($this->message);
		$handler = new ExceptionHandler;
		$handler->run($exception);

		$stub->update($handler);
	}

	public function testUpdateNull(): void
	{
		$handler  = new UpdateTestHandler;
		$expected = null;
		$actual   = $this->object->update($handler);
		$msg      = 'ErrorRenderer::update() returns wrong result!';

		self::assertSame($expected, $actual, $msg);
	}

	public function testGetMessageBuilder(): void
	{
		$expected = new ErrorBuilder;
		$this->object->setMessageBuilder($expected);

		$result = $this->object->getMessageBuilder();
		$msg = 'EmailNotifier::getMessageBuilder() returns wrong result!';
		self::assertSame($expected, $result, $msg);
	}
}
