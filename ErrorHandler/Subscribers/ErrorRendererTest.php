<?php
namespace Veles\Tests\ErrorHandler\Subscribers;

use Veles\ErrorHandler\ExceptionHandler;
use Veles\ErrorHandler\HtmlBuilders\ErrorBuilder;
use Veles\ErrorHandler\Subscribers\ErrorRenderer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-06 at 08:25:43.
 * @group error-handler
 */
class ErrorRendererTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var ErrorRenderer
	 */
	protected $object;
	protected $message = 'THIS IS TEST ERROR!';
	protected $html;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new ErrorRenderer;
		$this->html = <<<EOL
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title></title>
</head>
<body>
	$this->message</body>
</html>

EOL;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers Veles\ErrorHandler\Subscribers\ErrorRenderer::update
	 */
	public function testUpdate()
	{
		$builder = new ErrorBuilder;
		$builder->setTemplate('Errors/exception.phtml');

		$exception = new \Exception($this->message);
		$handler = new ExceptionHandler;
		$handler->run($exception);

		$this->expectOutputString($this->html);

		$this->object->setMessageBuilder($builder);
		$this->object->update($handler);
	}

	/**
	 * @covers Veles\ErrorHandler\Subscribers\ErrorRenderer::setMessageBuilder
	 */
	public function testSetMessageBuilder()
	{
		$expected = new ErrorBuilder;
		$this->object->setMessageBuilder($expected);

		$msg = 'ErrorRenderer::setMessageBuilder() wrong behavior!';
		$this->assertAttributeSame($expected, 'message_builder', $this->object, $msg);
	}

	/**
	 * @covers Veles\ErrorHandler\Subscribers\ErrorRenderer::getMessageBuilder
	 * @depends testSetMessageBuilder
	 */
	public function testGetMessageBuilder()
	{
		$expected = new ErrorBuilder;
		$this->object->setMessageBuilder($expected);

		$result = $this->object->getMessageBuilder();
		$msg = 'ErrorRenderer::getMessageBuilder() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}
}
