<?php
namespace Veles\Tests\ErrorHandler;

use PHPUnit\Framework\TestCase;
use Veles\ErrorHandler\BaseErrorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-11 at 19:33:00.
 * @group ErrorHandler
 */
class BaseErrorHandlerTest extends TestCase
{
	/**
	 * @var BaseErrorHandler
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new BaseErrorHandler;
	}

	/**
	 * @covers \Veles\ErrorHandler\BaseErrorHandler::getVars
	 */
	public function testGetVars()
	{
		$expected = [];
		$result = $this->object->getVars();

		$msg = 'BaseErrorHandler::getVars() returns wrong result!';
		$this->assertSame($expected, $result, $msg);

		$msg = 'BaseErrorHandler::vars has wrong default type!';
		$this->assertAttributeInternalType('array', 'vars', $this->object, $msg);
	}

	/**
	 * @covers       \Veles\ErrorHandler\BaseErrorHandler::setTime
	 * @dataProvider setTimeProvider
	 *
	 * @param $expected
	 */
	public function testSetTime($expected)
	{
		$this->object->setTime($expected);

		$msg = 'BaseErrorHandler::setTime() wrong behavior!';
		$this->assertAttributeSame($expected, 'time', $this->object, $msg);
	}

	public function setTimeProvider()
	{
		return [
			[uniqid()],
			[uniqid()]
		];
	}

	/**
	 * @covers       \Veles\ErrorHandler\BaseErrorHandler::getTime
	 * @dataProvider getTimeProvider
	 * @depends      testSetTime
	 *
	 * @param $time
	 * @param $expected
	 */
	public function testGetTime($time, $expected)
	{
		$this->object->setTime($time);

		$msg = 'BaseErrorHandler::getTime() wrong behavior!';

		$result = $this->object->getTime();
		$this->assertGreaterThanOrEqual($expected, $result, $msg);
		$this->assertAttributeGreaterThanOrEqual($expected, 'time', $this->object, $msg);

		$expected = strftime('%Y-%m-%d %H:%M:%S', time());
		$this->assertLessThanOrEqual($expected, $result, $msg);
		$this->assertAttributeLessThanOrEqual($expected, 'time', $this->object, $msg);

	}

	public function getTimeProvider()
	{
		$time = strftime('%Y-%m-%d %H:%M:%S', time());

		return [
			[$time, $time],
			[null, $time]
		];
	}
}
