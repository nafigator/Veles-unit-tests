<?php
namespace Veles\Tests\ErrorHandler\HtmlBuilders;

use Exception;
use Veles\ErrorHandler\ExceptionHandler;
use Veles\ErrorHandler\FatalErrorHandler;
use Veles\ErrorHandler\HtmlBuilders\ErrorBuilder;
use Veles\ErrorHandler\Subscribers\ErrorRenderer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-06 at 08:29:36.
 * @group error-handler
 */
class ErrorBuilderTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var ErrorBuilder
	 */
	protected $object;
	protected $message = 'Test exception!';
	protected $html;


	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new ErrorBuilder;
		$this->html = <<<EOL
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title></title>
</head>
<body>
	$this->message</body>
</html>

EOL;
	}

	/**
	 * @covers       \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::getHtml
	 * @covers       \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::convertTypeToString
	 * @covers       \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::formatBacktrace
	 *
	 * @dataProvider getHtmlProvider
	 *
	 * @param $trace
	 */
	public function testGetHtml($trace)
	{
		$exception = $this->getMockBuilder(Exception::class)
			->setMethods(['getTrace'])
			->setConstructorArgs([$this->message])
			->getMock();

		$exception->expects($this->once())
			->method('getTrace')
			->willReturn($trace);

		$handler = new ExceptionHandler;

		$this->object->setTemplate('Errors/exception.phtml');
		$this->object->setHandler($handler);
		$renderer = new ErrorRenderer;
		$renderer->setMessageBuilder($this->object);

		$this->expectOutputString($this->html);

		$handler->attach($renderer);
		$handler->run($exception);
	}

	public function getHtmlProvider()
	{
		return [
			[
				[
					[
						'file'     => "phar:///usr/local/bin/phpunit/phpunit/Framework/TestCase.php",
						'line'     => 844,
						'function' => "runTest",
						'class'    => "PHPUnit_Framework_TestCase",
						'type'     => "->",
						'args'     => []
					],
					[
						'file'     => "phar:///usr/local/bin/phpunit/phpunit/Framework/TestCase.php",
						'line'     => 844,
						'function' => "test",
						'args'     => []
					]
				]
			]
		];
	}

	/**
	 * @covers \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::getHandler
	 */
	public function testGetHandler()
	{
		$expected = new FatalErrorHandler;
		$this->object->setHandler($expected);

		$result = $this->object->getHandler();

		$msg = 'ErrorBuilder::getHandler() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::setHandler
	 */
	public function testSetHandler()
	{
		$expected = new FatalErrorHandler;
		$this->object->setHandler($expected);
		$msg = 'ErrorBuilder::setHandler() wrong behavior!';
		$this->assertAttributeSame($expected, 'handler', $this->object, $msg);
	}

	/**
	* @covers \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::setTemplate
	*/
	public function testSetTemplate()
	{
		$expected = uniqid();
		$this->object->setTemplate($expected);
		$msg = 'ErrorBuilder::setTemplate() wrong behavior!';
		$this->assertAttributeSame($expected, 'template', $this->object, $msg);
	}

	/**
	* @covers \Veles\ErrorHandler\HtmlBuilders\ErrorBuilder::getTemplate
	* @depends testSetTemplate
	*/
	public function testGetTemplate()
	{
		$expected = uniqid();
		$this->object->setTemplate($expected);
		$result = $this->object->getTemplate();
		$msg = 'ErrorBuilder::setTemplate() wrong behavior!';
		$this->assertSame($expected, $result, $msg);
	}
}
