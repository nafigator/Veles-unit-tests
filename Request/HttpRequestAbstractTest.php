<?php
namespace Tests\Request;

use PHPUnit\Framework\TestCase;
use Veles\Request\HttpPostRequest;
use Veles\Request\HttpRequestAbstract;
use Veles\Request\Validator\Adapters\JsonSchemaAdapter;
use Veles\Request\Validator\Validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-18 at 12:03:02.
 * @group request
 */
class HttpRequestAbstractTest extends TestCase
{
	/**
	 * @var HttpRequestAbstract
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new HttpPostRequest;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers \Veles\Request\HttpRequestAbstract::setStream
	 */
	public function testSetStream()
	{
		$expected = uniqid();

		$this->object->setStream($expected);
		$msg = 'HttpRequestAbstract::setStream() wrong behavior!';
		$this->assertAttributeSame($expected, 'stream', $this->object, $msg);
	}

	/**
	 * @covers \Veles\Request\HttpRequestAbstract::getValidator
	 */
	public function testGetValidator()
	{
		$expected = new Validator;

		$this->object->setValidator($expected);
		$actual = $this->object->getValidator();

		$msg = 'HttpRequestAbstract::getValidator() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers \Veles\Request\HttpRequestAbstract::setValidator
	 */
	public function testSetValidator()
	{
		$expected = new Validator;

		$this->object->setValidator($expected);
		$msg = 'HttpRequestAbstract::setValidator() wrong behavior!';
		$this->assertAttributeSame($expected, 'validator', $this->object, $msg);
	}

	/**
	 * @covers \Veles\Request\HttpRequestAbstract::getData
	 */
	public function testGetData()
	{
		$expected = [uniqid()];
		$definitions = uniqid();

		$_POST = $expected;

		$validator = $this->getMockBuilder(Validator::class)
			->setMethods(['isValid', 'getData'])
			->getMock();

		$validator->expects($this->once())
			->method('isValid')
			->willReturn(true);

		$validator->expects($this->once())
			->method('getData')
			->willReturn($expected);

		$adapter = $this->getMockBuilder(JsonSchemaAdapter::class)
			->setMethods(['check'])
			->disableOriginalConstructor()
			->getMock();

		$adapter->expects($this->once())
			->method('check');

		$validator->setAdapter($adapter);

		$this->object->setValidator($validator);

		$actual = $this->object->getData($definitions);
		$msg = 'HttpRequestAbstract::getData returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}
}
