<?php
namespace Tests\Request\Validator;

use PHPUnit\Framework\TestCase;
use Veles\Request\Validator\Validator;
use Veles\Request\Validator\Adapters\JsonSchemaAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-17 at 15:35:34.
 * @group request
 */
class ValidatorTest extends TestCase
{
	/**
	 * @var Validator
	 */
	protected $object;
	protected $adapter;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new Validator;
		$this->adapter = $this->getMockBuilder(JsonSchemaAdapter::class)
			->onlyMethods(['addError', 'getErrors', 'check', 'isValid', 'getData'])
			->disableOriginalConstructor()
			->getMock();
		$this->object->setAdapter($this->adapter);
	}

	public function testAddError(): void
	{
		$field    = uniqid();
		$message  = uniqid();
		$array = [['field' => $field, 'message' => $message]];

		$this->adapter->expects(self::once())
			->method('addError');

		$this->object->addError($array);
	}

	public function testGetErrors(): void
	{
		$field    = uniqid();
		$message  = uniqid();
		$expected = [['field' => $field, 'message' => $message]];

		$this->adapter->expects(self::once())
			->method('getErrors')
			->willReturn($expected);

		$actual = $this->object->getErrors();
		$msg = 'Validator::getErrors() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testCheck(): void
	{
		$data        = uniqid();
		$definitions = uniqid();

		$this->adapter->expects(self::once())
			->method('check')
			->with($data, $definitions);

		$this->object->check($data, $definitions);
	}

	public function testIsValid(): void
	{
		$expected = true;
		$this->adapter->expects(self::once())
			->method('isValid')
			->willReturn($expected);

		$actual = $this->object->isValid();
		$msg = 'Validator::isValid() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetAdapter(): void
	{
		$expected = new JsonSchemaAdapter(true, false);

		$this->object->setAdapter($expected);

		$actual = $this->object->getAdapter();
		$msg = 'Validator::getAdapter() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function testGetData(): void
	{
		$expected = [1,2,3];

		$this->adapter->expects(self::once())
			->method('getData')
			->willReturn($expected);

		$actual = $this->object->getData();
		$msg = 'Validator::getData()returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}
}
