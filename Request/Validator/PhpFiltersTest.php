<?php
namespace Tests\Request\Validator;

use PHPUnit\Framework\TestCase;
use Veles\Request\Validator\PhpFilters;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-21 at 19:13:32.
 * @group request
 */
class PhpFiltersTest extends TestCase
{
	/**
	 * @var PhpFilters
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new PhpFilters;
	}

	public function testGetErrors(): void
	{
		$error = ['field' => 'name', 'message' => 'ERROR_GET'];
		$expected = [$error];
		$this->object->addError($error);

		$actual = $this->object->getErrors();
		$msg = 'PhpFilters::getErrors() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	/**
	 * @dataProvider getDataProvider
	 */
	public function testGetData($data, $definitions, $expected, $errors): void
	{
		$this->object->check($data, $definitions);

		$actual = $this->object->getData();
		$msg = 'PhpFilters::getData() returns wrong result!';
		self::assertSame($expected, $actual, $msg);

		$expected = $errors;
		$actual = $this->object->getErrors();
		$msg = 'PhpFilters::getData() wrong behavior!';
		self::assertSame($expected, $actual, $msg);
	}

	public function getDataProvider(): array
	{
		$definitions = [
			'id'       => [
				'filter'   => FILTER_VALIDATE_INT,
				'flag'     => FILTER_REQUIRE_SCALAR,
				'required' => true
			],
			'email'    => [
				'filter'   => FILTER_VALIDATE_EMAIL,
				'flag'     => FILTER_REQUIRE_SCALAR,
				'required' => true
			],
			'password' => [
				'filter'   => FILTER_VALIDATE_REGEXP,
				'flag'     => FILTER_REQUIRE_SCALAR,
				'options'  => ['regexp' => '/.{6,32}/'],
				'required' => true
			],
			'secret'   => [
				'filter'   => FILTER_VALIDATE_REGEXP,
				'flag'     => FILTER_REQUIRE_SCALAR,
				'options'  => ['regexp' => '/.{6,32}/'],
				'required' => true
			]
		];

		return [
			[
				[
					'id'       => '1234',
					'email'    => 'mail@mail.ru',
					'password' => 'secret',
					'secret'   => 'valid value'
				],
				$definitions,
				[
					'id'       => 1234,
					'email'    => 'mail@mail.ru',
					'password' => 'secret',
					'secret'   => 'valid value'
				],
				[]
			],
			[
				[
					'email'    => 'mail@mail.ru',
					'password' => 'short',
					'secret'   => 'valid value'
				],
				$definitions,
				[
					'id'       => null,
					'email'    => 'mail@mail.ru',
					'password' => false,
					'secret'   => 'valid value'
				],
				[
					[
						'field' => 'id',
						'message' =>'id is required'
					],
					[
						'field' => 'password',
						'message' =>'password is not a valid value'
					],
				]
			]
		];
	}

	/**
	 * @dataProvider isValidProvider
	 */
	public function testIsValid($error, $expected): void
	{
		if (null !== $error) {
			$this->object->addError($error);
		}

		$actual = $this->object->isValid();
		$msg = 'PhpFilters::isValid() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function isValidProvider(): array
	{
		return [
			[
				null,
				true
			],
			[
				['field' => 'name', 'message' => 'error msg'],
				false
			]
		];
	}
}
