<?php
namespace Tests\Request\Validator;

use Veles\Request\Validator\PhpFilters;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-21 at 19:13:32.
 * @group request
 */
class PhpFiltersTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var PhpFilters
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new PhpFilters;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers \Veles\Request\Validator\PhpFilters::addError
	 */
	public function testAddError()
	{
		$error = ['field' => 'name', 'message' => 'ERROR'];
		$expected = [$error];
		$this->object->addError($error);

		$msg = 'PhpFilters::addError() wrong behavior';
		$this->assertAttributeSame($expected, 'errors', $this->object, $msg);
	}

	/**
	 * @covers \Veles\Request\Validator\PhpFilters::getErrors
	 */
	public function testGetErrors()
	{
		$error = ['field' => 'name', 'message' => 'ERROR_GET'];
		$expected = [$error];
		$this->object->addError($error);

		$actual = $this->object->getErrors();
		$msg = 'PhpFilters::getErrors() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}

	/**
	 * @covers       \Veles\Request\Validator\PhpFilters::check
	 * @covers       \Veles\Request\Validator\PhpFilters::processResult
	 * @covers       \Veles\Request\Validator\PhpFilters::checkField
	 *
	 * @dataProvider checkProvider
	 *
	 * @param $data
	 * @param $definitions
	 * @param $expected
	 */
	public function testCheck($data, $definitions, $expected)
	{
		$this->object->check($data, $definitions);
		$msg = 'PhpFilters::check() wrong behavior!';
		$this->assertAttributeSame($expected, 'errors', $this->object, $msg);
	}

	public function checkProvider()
	{
		$definitions = [
			'email' => [
				'filter'  => FILTER_VALIDATE_EMAIL,
				'flag'    => FILTER_REQUIRE_SCALAR,
				'options' => ['required' => true]
			],
			'password' => [
				'filter'  => FILTER_VALIDATE_REGEXP,
				'flag'    => FILTER_REQUIRE_SCALAR,
				'options' => [
					'required' => true,
					'regexp'   => '/.{6,32}/'
				]
			],
			'secret' => [
				'filter'  => FILTER_VALIDATE_REGEXP,
				'flag'    => FILTER_REQUIRE_SCALAR,
				'options' => [
					'regexp'   => '/.{6,32}/'
				]
			],
		];

		return [
			[
				['email' => 'wrong', 'password' => 'wrong', 'secret' => 'wrong'],
				$definitions,
				[
					[
						'field' => 'email',
						'message' => 'email is not a valid value'
					],
					[
						'field' => 'password',
						'message' => 'password is not a valid value'
					],
					[
						'field' => 'secret',
						'message' => 'secret is not a valid value'
					]
				]
			],
			[
				['email' => 'mail@mail.ru', 'password' => 'secret'],
				$definitions,
				[]
			],
			[
				['email' => 'mail@mail.ru', 'password' => 'secret', 'secret' => 'valid value'],
				$definitions,
				[]
			],
			[
				['id' => 1234],
				$definitions,
				[
					[
						'field' => 'email',
						'message' => 'email is required'
					],
					[
						'field' => 'password',
						'message' => 'password is required'
					]
				]
			],
			[
				['secret' => 'valid value'],
				$definitions,
				[
					[
						'field' => 'email',
						'message' => 'email is required'
					],
					[
						'field' => 'password',
						'message' => 'password is required'
					]
				]
			]
		];
	}

	/**
	 * @covers       \Veles\Request\Validator\PhpFilters::isValid
	 *
	 * @dataProvider isValidProvider
	 *
	 * @param $error
	 * @param $expected
	 */
	public function testIsValid($error, $expected)
	{
		if (null !== $error) {
			$this->object->addError($error);
		}

		$actual = $this->object->isValid();
		$msg = 'PhpFilters::isValid() returns wrong result!';
		$this->assertSame($expected, $actual, $msg);
	}

	public function isValidProvider()
	{
		return [
			[
				null,
				true
			],
			[
				['field' => 'name', 'message' => 'error msg'],
				false
			]
		];
	}
}
