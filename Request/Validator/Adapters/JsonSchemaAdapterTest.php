<?php
namespace Tests\Request\Validator\Adapters;

use PHPUnit\Framework\TestCase;
use stdClass;
use Veles\Request\Validator\Adapters\JsonSchemaAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-17 at 16:40:08.
 * @group request
 */
class JsonSchemaAdapterTest extends TestCase
{
	/**
	 * @var JsonSchemaAdapter
	 */
	protected $object;
	protected $driver;
	protected $resolver;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->driver = $this->getMockBuilder(stdClass::class)
			->addMethods(['addError', 'getErrors', 'check', 'isValid'])
			->disableOriginalConstructor()
			->getMock();

		$this->resolver = $this->getMockBuilder(stdClass::class)
			->addMethods(['resolve'])
			->disableOriginalConstructor()
			->getMock();

		$this->object = new JsonSchemaAdapter($this->driver, $this->resolver);
	}

	public function testAddError(): void
	{
		$field   = uniqid();
		$message = uniqid();
		$array   = ['field' => $field, 'message' => $message];

		$this->driver->expects(self::once())
			->method('addError')
			->with($field, $message);

		$this->object->addError($array);
	}

	public function testGetErrors(): void
	{
		$field    = uniqid();
		$message  = uniqid();
		$expected = [['field' => $field, 'message' => $message]];

		$this->driver->expects(self::once())
			->method('getErrors')
			->willReturn($expected);

		$this->object->getErrors();
	}

	public function testCheck(): void
	{
		$data        = uniqid();
		$definitions = uniqid();

		$this->driver->expects(self::once())
			->method('check')
			->with($data, $definitions);

		$this->resolver->expects(self::once())
			->method('resolve')
			->with($definitions);

		$this->object->check($data, $definitions);
	}

	public function testIsValid(): void
	{
		$expected = true;
		$this->driver->expects(self::once())
			->method('isValid')
			->willReturn($expected);

		$actual = $this->object->isValid();
		$msg = 'JsonSchemaAdapter::isValid() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}
}
