<?php
namespace Tests\Request;

use Veles\Request\HttpJsonSchemaRequest;
use Veles\Request\Validator\Validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-01-18 at 12:31:15.
 * @group request
 */
class HttpJsonSchemaRequestTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var HttpJsonSchemaRequest
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new HttpJsonSchemaRequest;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @covers \Veles\Request\HttpJsonSchemaRequest::getBody
	 */
	public function testGetBody()
	{
		$filename = uniqid() . '.txt';
		$json = '{"message": "this is text"}';
		$expected = new \stdClass;
		$expected->message = 'this is text';
		file_put_contents($filename, $json);
		$this->object->setStream($filename);

		$result = $this->object->getBody();
		unlink($filename);

		$msg = 'HttpJsonSchemaRequest::getBody() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);
	}

	/**
	 * @covers \Veles\Request\HttpJsonSchemaRequest::check
	 */
	public function testCheck()
	{
		$definitions = '
		{
		  "$schema": "http://json-schema.org/draft-04/schema#",
		  "type": "object",
		  "properties": {
			"message": {
			  "type": "string"
			}
		  },
		  "required": ["message"]
		}';
		$json = '{"message": "this is tests string"}';
		$expected = ['message' => "this is tests string"];

		$this->object = $this->getMockBuilder(HttpJsonSchemaRequest::class)
			->setMethods(['getBody'])
			->getMock();

		$this->object->expects($this->once())
			->method('getBody')
			->willReturn(json_decode($json));

		$validator = $this->getMockBuilder(Validator::class)
			->setMethods(['check', 'isValid'])
			->getMock();

		$validator->expects($this->once())
			->method('check')
			->with(json_decode($json), json_decode($definitions));

		$validator->expects($this->once())
			->method('isValid')
			->willReturn(true);

		$this->object->setValidator($validator);

		$this->object->check($definitions);

		$msg = 'HttpJsonSchemaRequest::check() wrong behavior!';
		$this->assertAttributeSame($expected, 'data', $this->object, $msg);
	}

	/**
	 * @covers \Veles\Request\HttpJsonSchemaRequest::check
	 *
	 * @expectedException \Veles\Exceptions\Http\UnprocessableException
	 */
	public function testCheckException()
	{
		$definitions = '
		{
		  "$schema": "http://json-schema.org/draft-04/schema#",
		  "type": "object",
		  "properties": {
			"message": {
			  "type": "string"
			}
		  },
		  "required": ["message"]
		}';

		$errors = ['ERROR_MSG'];
		$json   = '{"message": "this is tests string"}';

		$this->object = $this->getMockBuilder(HttpJsonSchemaRequest::class)
			->setMethods(['getBody'])
			->getMock();

		$this->object->expects($this->once())
			->method('getBody')
			->willReturn(json_decode($json));

		$validator = $this->getMockBuilder(Validator::class)
			->setMethods(['check', 'isValid', 'getErrors'])
			->getMock();

		$validator->expects($this->once())
			->method('check')
			->with(json_decode($json), json_decode($definitions));

		$validator->expects($this->once())
			->method('isValid')
			->willReturn(false);

		$validator->expects($this->once())
			->method('getErrors')
			->willReturn($errors);

		$this->object->setValidator($validator);
		$this->expectOutputString('{"errors":["ERROR_MSG"]}');

		$this->object->check($definitions);
	}
}
