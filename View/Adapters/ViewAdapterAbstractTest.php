<?php

namespace Veles\Tests\View\Adapters;

use Exception;
use PHPUnit\Framework\TestCase;
use Veles\DataBase\Adapters\PdoAdapter;
use Veles\View\Adapters\NativeAdapter;
use Veles\View\View;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-19 at 11:42:12.
 *
 * @group view
 */
class ViewAdapterAbstractTest extends TestCase
{
	/**
	 * @var ViewAdapterAbstractChild
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = ViewAdapterAbstractChild::instance();
	}

	public function testInstance(): void
	{
		$this->object->addCalls([]);
		$this->object->setInstance(null);
		$expected = ViewAdapterAbstractChild::class;
		$result   = $this->object::instance();

		$msg = 'ViewAdapterAbstract::instance() returns wrong result!';
		self::assertInstanceOf($expected, $result, $msg);

		$this->object->setInstance(null);
		$this->object->addCalls(
			[
				[
					'method'    => 'testCall',
					'arguments' => ['string'],
				],
			]
		);

		$result = $this->object::instance();

		$msg = 'ViewAdapterAbstract::instance() returns wrong result!';
		self::assertInstanceOf($expected, $result, $msg);

		$result = $this->object->getCalls();
		self::assertSame([], $result);

		View::setAdapter(NativeAdapter::instance());
	}

	public function testGetDriver(): void
	{
		$expected = null;
		$this->object->setDriver($expected);

		$result = $this->object->getDriver();

		$msg = 'Wrong ViewAdapterAbstract::getDriver() behavior!';
		self::assertSame($expected, $result, $msg);

		$expected = $this->object;
		$this->object->setDriver($expected);

		$result = $this->object->getDriver();

		$msg = 'Wrong ViewAdapterAbstract::getDriver() behavior!';
		self::assertSame($expected, $result, $msg);
	}


	public function testCallException(): void
	{
		$this->expectException(Exception::class);

		$this->object->lalala();
	}

	public function testCall(): void
	{
		$this->object->setInstance(null);

		$this->object->setDriver(new PdoAdapter);
		$this->object->rows([1]);

		$expected = [
			[
				'method'    => 'rows',
				'arguments' => [[1]],
			],
		];

		$actual = $this->object->getCalls();
		$msg    = 'LazyCalls::__call() wrong behavior!';
		self::assertSame($expected, $actual, $msg);
	}
}
