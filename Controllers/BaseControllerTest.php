<?php
namespace Tests\Controllers;

use Controllers\Frontend\Home;
use PHPUnit\Framework\TestCase;
use Veles\Application\Application;
use Veles\Request\HttpGetRequest;
use Veles\Routing\IniConfigLoader;
use Veles\Routing\Route;
use Veles\Routing\RoutesConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-24 at 10:20:22.
 * @group controllers
 */
class BaseControllerTest extends TestCase
{
	/**
	 * @var Home
	 */
	protected $object;
	protected $application;
	/** @var Route */
	protected $route;

	protected function setUp(): void
	{
		$this->route = $this->getMockBuilder(Route::class)
			->onlyMethods(['parseUri'])
			->getMock();

		$config = new RoutesConfig(
			new IniConfigLoader(TEST_DIR . '/Project/routes.ini')
		);
		$this->route->setConfigHandler($config);

		$this->application = (new Application)->setRoute($this->route);
		$this->object = (new Home)->setApplication($this->application);
	}

	protected function tearDown(): void
	{
		unset($_POST);
	}

	public function testGetApplication(): void
	{
		$expected = $this->application;
		$actual   = $this->object->getApplication();

		$msg = 'BaseController::getApplication() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	/**
	 * @dataProvider getParamProvider
	 */
	public function testGetParam($parse_result, $expected): void
	{
		$this->route->method('parseUri')->willReturn($parse_result);
		$this->route->init();

		$actual = $this->object->book();

		$msg = 'BaseController::getParams() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	public function getParamProvider(): array
	{
		return [
			[
				['/book/5/user/8', 'book'],
				['book' => '5', 'user' => '8']
			],
			[
				['/book/575/user/82', 'book'],
				['book' => '575', 'user' => '82']
			]
		];
	}

	public function testGetData(): void
	{
		$_POST       = [
			'email'    => 'mail@mail.ru',
			'password' => 'super_pass'
		];
		$definitions = [
			'email'    => [
				'filter'  => FILTER_VALIDATE_EMAIL,
				'flag'    => FILTER_REQUIRE_SCALAR,
				'options' => ['required' => true]
			],
			'password' => [
				'filter'  => FILTER_VALIDATE_REGEXP,
				'flag'    => FILTER_REQUIRE_SCALAR,
				'options' => [
					'required' => true,
					'regexp'   => '/.{6,32}/'
				]
			]
		];
		$expected    = [
			[
				'email'    => 'mail@mail.ru',
				'password' => 'super_pass'
			]
		];

		$request = $this->getMockBuilder(HttpGetRequest::class)
			->onlyMethods(['getData'])
			->getMock();

		$request->expects(self::once())
			->method('getData')
			->with($definitions)
			->willReturn($expected);

		$this->application->setRequest($request);


		$actual = $this->object->read();

		$msg = 'BaseController::getData() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}
}
