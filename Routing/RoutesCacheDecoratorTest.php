<?php
namespace Veles\Tests\Routing;

use Memcached;
use PHPUnit\Framework\TestCase;
use Veles\Cache\Cache;
use Veles\Routing\IniConfigLoader;
use Veles\Routing\RoutesCacheDecorator;
use Veles\Routing\RoutesConfig;
use Veles\Tests\Cache\Adapters\MemcachedAdapterChild;
use Veles\Routing\RouteStatic;
use Veles\View\Adapters\NativeAdapter;
use Veles\Routing\RouteRegex;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-24 at 20:32:26.
 * @group cache
 */
class RoutesCacheDecoratorTest extends TestCase
{
	/**
	 * @var RoutesCacheDecorator
	 */
	protected $object;
	protected $config;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->config = new RoutesConfig(
			new IniConfigLoader(TEST_DIR . '/Project/routes.ini')
		);
		$this->object = new RoutesCacheDecorator($this->config);
		$this->object->setPrefix('VELES-UNIT-TESTS::ROUTES-CONFIG');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(): void
	{
		Cache::del('VELES-UNIT-TESTS::ROUTES-CONFIG');
	}

	/**
	 * @dataProvider getDataProvider
	 */
	public function testGetData($expected, $get_result): void
	{
		$mock_methods = $get_result
			? ['get']
			: ['get', 'set'];

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->onlyMethods($mock_methods)
			->getMock();

		$driver->method('get')
			->with($this->object->getPrefix())
			->willReturn($get_result);

		if (!$get_result) {
			$driver->method('set')->with($this->object->getPrefix(), $expected);
		}

		$adapter = (new MemcachedAdapterChild())->setDriver($driver);
		Cache::setAdapter($adapter);

		$msg = 'RoutesCacheDecorator::getData() returns wrong result!';

		$actual = $this->object->getData();
		self::assertSame($expected, $actual, $msg);
	}

	public function getDataProvider(): array
	{
		$expected = [
			''         => [
				'Home'  => [
					'class'      => RouteStatic::class,
					'view'       => NativeAdapter::class,
					'route'      => '/',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'index',
				],
				'Home1' => [
					'class'      => RouteStatic::class,
					'view'       => NativeAdapter::class,
					'route'      => '/index.html',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'index',
				],
			],
			'page'     => [
				'Home2' => [
					'class'      => RouteRegex::class,
					'view'       => NativeAdapter::class,
					'route'      => '#^\\/page\\/(?<page>\\d+)$#',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'index',
				],
			],
			'book'     => [
				'TestMap' => [
					'class'      => RouteRegex::class,
					'view'       => NativeAdapter::class,
					'route'      => '#^\\/book\\/(?<book_id>\\d+)\\/user\\/(?<user_id>\\d+)$#',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'book',
				],
			],
			'contacts' => [
				'Contacts' => [
					'class'      => RouteStatic::class,
					'route'      => '/contacts',
					'controller' => 'Frontend\Contacts',
					'action'     => 'getAddress',
					'ajax'       => '1',
				],
			],
			'user'     => [
				'User' => [
					'class' => RouteStatic::class,
					'route' => '/user',
				],
			],
			'fake-route' => [
				'Key'  => 'value'
			]
		];

		return [
			[
				$expected, $expected
			],
			[
				$expected, false
			]
		];
	}

	public function testGetPrefix(): void
	{
		$expected = 'VELES-UNIT-TESTS::ROUTES-CONFIG';
		$actual = $this->object->getPrefix();

		$msg = 'RoutesCacheDecorator::getPrefix() returns wrong result!';
		self::assertSame($expected, $actual, $msg);
	}

	/**
	 * @dataProvider getSectionProvider
	 */
	public function testGetSection($name, $expected, $get_result, $routes): void
	{
		$mock_methods = $get_result
			? ['get']
			: ['get', 'set'];

		/** @var Memcached $driver */
		$driver = $this->getMockBuilder(Memcached::class)
			->onlyMethods($mock_methods)
			->getMock();

		$driver->method('get')
			->with($this->object->getPrefix())
			->willReturn($get_result);

		if (!$get_result) {
			$driver->method('set')->with($this->object->getPrefix(), $routes);
		}

		$adapter = (new MemcachedAdapterChild())->setDriver($driver);
		Cache::setAdapter($adapter);

		$msg = 'RoutesCacheDecorator::getSection() returns wrong result!';

		$actual = $this->object->getSection($name);
		self::assertSame($expected, $actual, $msg);
	}

	public function getSectionProvider(): array
	{
		$routes = [
			''         => [
				'Home'  => [
					'class'      => RouteStatic::class,
					'view'       => NativeAdapter::class,
					'route'      => '/',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'index',
				],
				'Home1' => [
					'class'      => RouteStatic::class,
					'view'       => NativeAdapter::class,
					'route'      => '/index.html',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'index',
				],
			],
			'page'     => [
				'Home2' => [
					'class'      => RouteRegex::class,
					'view'       => NativeAdapter::class,
					'route'      => '#^\\/page\\/(?<page>\\d+)$#',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'index',
				],
			],
			'book'     => [
				'TestMap' => [
					'class'      => RouteRegex::class,
					'view'       => NativeAdapter::class,
					'route'      => '#^\\/book\\/(?<book_id>\\d+)\\/user\\/(?<user_id>\\d+)$#',
					'tpl'        => 'Frontend/index.phtml',
					'controller' => 'Frontend\Home',
					'action'     => 'book',
				],
			],
			'contacts' => [
				'Contacts' => [
					'class'      => RouteStatic::class,
					'route'      => '/contacts',
					'controller' => 'Frontend\Contacts',
					'action'     => 'getAddress',
					'ajax'       => '1',
				],
			],
			'user'     => [
				'User' => [
					'class' => RouteStatic::class,
					'route' => '/user',
				],
			],
			'fake-route' => [
				'Key'  => 'value'
			]
		];

		return [
			[
				'',
				[
					'Home'  => [
						'class'      => RouteStatic::class,
						'view'       => NativeAdapter::class,
						'route'      => '/',
						'tpl'        => 'Frontend/index.phtml',
						'controller' => 'Frontend\\Home',
						'action'     => 'index',
					],
					'Home1' => [
						'class'      => 'Veles\\Routing\\RouteStatic',
						'view'       => 'Veles\\View\\Adapters\\NativeAdapter',
						'route'      => '/index.html',
						'tpl'        => 'Frontend/index.phtml',
						'controller' => 'Frontend\\Home',
						'action'     => 'index',
					],
				],
				$routes,
				null
			],
			[
				'',
				[
					'Home'  => [
						'class'      => RouteStatic::class,
						'view'       => NativeAdapter::class,
						'route'      => '/',
						'tpl'        => 'Frontend/index.phtml',
						'controller' => 'Frontend\\Home',
						'action'     => 'index',
					],
					'Home1' => [
						'class'      => RouteStatic::class,
						'view'       => NativeAdapter::class,
						'route'      => '/index.html',
						'tpl'        => 'Frontend/index.phtml',
						'controller' => 'Frontend\\Home',
						'action'     => 'index',
					],
				],
				false,
				$routes
			],
			[
				'page',
				[
					'Home2' => [
						'class'      => RouteRegex::class,
						'view'       => NativeAdapter::class,
						'route'      => '#^\\/page\\/(?<page>\\d+)$#',
						'tpl'        => 'Frontend/index.phtml',
						'controller' => 'Frontend\\Home',
						'action'     => 'index',
					],
				],
				$routes,
				null
			]
		];
	}
}
