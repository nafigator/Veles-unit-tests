<?php
namespace Veles\Tests\Routing;

use Controllers\Frontend\Home;
use Exception;
use Veles\Routing\IniConfigLoader;
use Veles\Routing\Route;
use Veles\Routing\RoutesConfig;
use Veles\View\Adapters\NativeAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-22 at 09:52:48.
 * @group route
 */
class RouteTest extends \PHPUnit_Framework_TestCase
{
	/** @var  Route */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = $this->getMockBuilder('\Veles\Routing\Route')
			->setMethods(['getUri'])
			->getMock();

		$config = new RoutesConfig(
			new IniConfigLoader(TEST_DIR . '/Project/routes.ini')
		);
		$this->object->setConfigHandler($config);
	}

	/**
	 * @covers Veles\Routing\Route::init
	 * @covers Veles\Routing\Route::execNotFoundHandler
	 * @covers Veles\Routing\Route::getUri
	 *
	 * @expectedException \Veles\Routing\Exceptions\NotFoundException
	 */
	public function testNotFoundException()
	{
		$this->object->method('getUri')->willReturn('/not-found');

		$this->object->init();
	}

	/**
	 * @covers Veles\Routing\Route::getUri
	 */
	public function testGetUri()
	{
		$route = new Route;
		$config = new RoutesConfig(
			new IniConfigLoader(TEST_DIR . '/Project/routes.ini')
		);
		$route->setConfigHandler($config);
		$route->setNotFoundException(null);
		$result = $route->init();

		$msg = 'Route::getUri() wrong behavior!';
		$this->assertSame($route, $result, $msg);
	}

	/**
	 * @covers       Veles\Routing\Route::isAjax
	 * @covers       Veles\Routing\Route::checkAjax
	 * @covers       Veles\Routing\Route::getUri
	 *
	 * @dataProvider isAjaxProvider
	 *
	 * @param $uri
	 * @param $expected
	 */
	public function testIsAjax($uri, $expected)
	{
		$this->object = $this->getMockBuilder('\Veles\Routing\Route')
			->setMethods(['getUri', 'checkAjax'])
			->getMock();
		$config = new RoutesConfig(
			new IniConfigLoader(TEST_DIR . '/Project/routes.ini')
		);
		$this->object->setConfigHandler($config);
		$this->object->method('getUri')->willReturn($uri);
		$this->object->method('checkAjax')->willReturn($expected);

		$result = $this->object->init()->isAjax();

		$msg = 'Wrong Route::isAjax() result!';
		$this->assertSame($expected, $result, $msg);
	}

	public function isAjaxProvider()
	{
		return [
			['/', false],
			['/contacts', true]
		];
	}

	/**
	 * @covers Veles\Routing\Route::checkAjax
	 * @expectedException Exception
	 * @expectedExceptionMessage AJAX-route got non-AJAX request!
	 */
	public function testCheckAjaxException()
	{
		$this->object->method('getUri')->willReturn('/contacts');
		$this->object->init()->getController();
	}

	/**
	 * @covers Veles\Routing\Route::getController
	 */
	public function testGetController()
	{
		$route = $this->getMockBuilder('\Veles\Routing\Route')
			->setMethods(['getUri'])
			->getMock();

		$config = new RoutesConfig(
			new IniConfigLoader(TEST_DIR . '/Project/routes.ini')
		);
		$route->method('getUri')->willReturn('/');
		$route->setConfigHandler($config)->init();

		$this->object->method('getUri')->willReturn('/');

		$expected = $controller = new Home($route);
		$result = $this->object->init()->getController();

		$msg = 'Route::getController() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);

		$result = $controller->getRoute();
		$expected = $route;
		$msg = 'Route::getController() wrong behavior!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @expectedException Exception
	 * @expectedExceptionMessage Не указан контроллер!
	 */
	public function testGetControllerException()
	{
		$this->object->method('getUri')->willReturn('/user');
		$this->object->init()->getController();
	}

	/**
	 * @covers Veles\Routing\Route::getActionName
	 */
	public function testGetActionName()
	{
		$this->object->method('getUri')->willReturn('/');
		$expected = 'index';
		$result = $this->object->init()->getActionName();

		$msg = 'Route::getActionName() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);
	}

	/**
	 * @expectedException Exception
	 * @expectedExceptionMessage Не указан экшен!
	 */
	public function testGetActionNameException()
	{
		$this->object->method('getUri')->willReturn('/user');
		$this->object->init()->getActionName();
	}

	/**
	 * @covers Veles\Routing\Route::getAdapter
	 */
	public function testGetAdapter()
	{
		$this->object->method('getUri')->willReturn('/');
		$expected = NativeAdapter::instance();
		$result = $this->object->init()->getAdapter();

		$msg = 'Route::getAdapter() returns wrong result!';
		$this->assertEquals($expected, $result, $msg);
	}

	/**
	 * @expectedException Exception
	 * @expectedExceptionMessage Не указан адаптер!
	 */
	public function testGetAdapterException()
	{
		$this->object->method('getUri')->willReturn('/user');
		$this->object->init()->getAdapter();
	}

	/**
	 * @covers Veles\Routing\Route::getPageName
	 */
	public function testGetPageName()
	{
		$this->object->method('getUri')->willReturn('/');
		$expected = 'Home';
		$result = $this->object->init()->getPageName();

		$msg = 'Route::getPageName() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	/**
	 * @covers       Veles\Routing\Route::getParams
	 * @covers       Veles\Routing\Route::init
	 * @dataProvider getParamsProvider
	 *
	 * @param $uri
	 * @param $expected
	 */
	public function testGetParams($uri, $expected)
	{
		$this->object->method('getUri')->willReturn($uri);
		$this->object->init();

		$msg = 'Route::$params wrong value!';
		$this->assertAttributeSame($expected, 'params', $this->object, $msg);

		$result = $this->object->init()->getParams();

		$msg = 'Route::getParams() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}

	public function getParamsProvider()
	{
		return [
			['/page-2.html', ['page' => '2']],
			['/page-8.html', ['page' => '8']],
			['/book/5/user/4', ['book_id' => '5', 'user_id' => '4']],
			['/book/5000/user/43', ['book_id' => '5000', 'user_id' => '43']],
			['/book/15/user/14', ['book_id' => '15', 'user_id' => '14']],
			['/book/500/user/143', ['book_id' => '500', 'user_id' => '143']]
		];
	}

	/**
	 * @covers Veles\Routing\Route::getTemplate
	 * @covers Veles\Routing\Route::init
	 */
	public function testGetTemplate()
	{
		$this->object->method('getUri')->willReturn('/');
		$expected = 'Frontend/index.phtml';
		$result = $this->object->init()->getTemplate();

		$msg = 'Route::getTemplate() returns wrong result!';
		$this->assertSame($expected, $result, $msg);
	}
}
